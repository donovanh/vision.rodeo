{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Donovanâ€™s Vision Blog",
	"language": "en",
	"home_page_url": "https://vision.rodeo/",
	"feed_url": "https://vision.rodeo/feed/feed.json",
	"description": "Build great apps for Apple Vision Pro",
	"author": {
		"name": "Donovan Hutchinson",
		"url": "https://hop.ie"
	},
	"items": [
		{
			"id": "https://vision.rodeo/dev-diary-01/",
			"url": "https://vision.rodeo/dev-diary-01/",
			"title": "Reps: Dev Diary #1",
			"content_html": "<p>The following is a log of the process of designing and building an app, while learning Swift and SwiftUI.</p>\n<p>The following represents the result of my poking around in XCode for about 6 months. I'd like to do smaller, more regular updates. By reading this, you're helping me by providing me accountability. Thank you!</p>\n<h2 id=\"my-goals-for-this-app\" tabindex=\"-1\">My goals for this app <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p>I'm interested in building apps, not just for Vision Pro but also iOS. I enjoy creating things and was looking for a new challenge last year, so when the Vision Pro was announced I thought it was a good time to learn some <a href=\"https://developer.apple.com/xcode/swiftui/\">Swift UI</a>.</p>\n<p>For learning, I've been taking part in the amazing sessions over at <a href=\"http://hackingwithswift.com\">Hacking with Swift</a>. I'd very much recommend Paul's <a href=\"http://hackingwithswift.com/plus\">HWS+</a> program but also the <a href=\"https://www.hackingwithswift.com/100/swiftui\">100 Days of SwiftUI</a> is one of the best online learning resources I've ever experienced. And it's free!</p>\n<p>I learn best when building so I also decided to build myself an app as a side project.</p>\n<h2 id=\"app-idea\" tabindex=\"-1\">App idea <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p>My side project app idea is a bodyweight exercise tracking app, codenamed &quot;Reps&quot;. I've been interested in callisthenics for a long time and a fan of the <a href=\"https://www.dragondoor.com/b41/\">Convict Conditioning</a> training approach.</p>\n<p>I have been out of practice recently and would like to get back into training again and enjoy the structure Convict Conditioning affords. However I would like to have an app that helps with the logging, as I find keeping a log quite helpful as a motivation:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/920lBpLOur-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/920lBpLOur-1200.webp 1200w\"><img alt=\"A month's training, from back when I had more discipline.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/920lBpLOur-1200.jpeg\" width=\"1200\" height=\"900\"></picture></p>\n<p>So that's where I'm starting. An app to track, log and maybe do more interesting things with training data.</p>\n<h2 id=\"minimum-viable-product\" tabindex=\"-1\">Minimum viable product <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p>The minimum product I'll need to start is a way to set up an exercise routine, then record my reps for each exercise. Other features like analysing the saved data can wait.</p>\n<p>This means at minimum this app will need:</p>\n<ul>\n<li>A set of data defining the exercises and their progressions</li>\n<li>Illustrations for each progression that help me know what the exercise involves</li>\n<li>A way of setting up a weekly schedule</li>\n<li>A way of seeing what my workout is for today</li>\n<li>A way to record today's exercises</li>\n</ul>\n<h2 id=\"step-0-paper-sketching\" tabindex=\"-1\">Step 0: Paper sketching <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/xX0Z9HPo-7-1280.avif 1280w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/xX0Z9HPo-7-1280.webp 1280w\"><img alt=\"Thinking through some flows on paper.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/xX0Z9HPo-7-1280.jpeg\" width=\"1280\" height=\"960\"></picture></p>\n<p>It's hard to just jump in and start coding, so I took a while to sketch out some (vague) notions for how the flows might work. While far from an actionable design, it got me thinking about the kinds of things I'd be showing and what data I would need.</p>\n<h2 id=\"step-1-data-and-data-structure\" tabindex=\"-1\">Step 1: Data and data structure <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p>To drive the views I need to set up some useful data. The purpose of this app is to guide the user along a series of exercise progressions.</p>\n<p>I decided to set up a structure similar to the Convict Conditioning guide. In it there are six exercise types: pushups, pullups, leg raises, squats, bridges and handstand pushups.</p>\n<p>Each exercise type has 10 progressions, ranging from easiest to hardest. Within each progression, there are 3 levels: beginner, intermediate, and progression level (which when completed allows you to progress to the next... progression). Naming is hard.</p>\n<p>To get it started in XCode, I set up the data like this:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> pushupDataSet<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Progression</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token class-name\">Progression</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>pushup<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>wallPushups<span class=\"token punctuation\">,</span> reps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">.</span>beginner<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>intermediate<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>progression<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">.</span>beginner<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>intermediate<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>progression<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> animationFileName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"pushup-01\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Progression</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">//... and so on, 10 for each exercise type</span></code></pre>\n<p>In this we have the progression's stage (0 through 9), an exercise type, name, and then a dictionary for each of reps and sets.</p>\n<p>The <code>type</code> is an enum of exercise types, such as <code>.pushup</code>, <code>.pullup</code>, etc. This makes it easier to use <code>ExerciseType</code> values in my code.</p>\n<p>For the name, I use a <a href=\"https://developer.apple.com/documentation/foundation/localizedstringresource\">LocalizedStringResource</a> enum:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">ProgressionName</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">LocalizedStringResource</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> shortBridges <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Short bridges\"</span></span>\n    <span class=\"token keyword\">case</span> straightBridges <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Straight bridges\"</span></span>\n    <span class=\"token comment\">// etc</span></code></pre>\n<p>This will make it easier to translate than having hard-coded names in the data object.</p>\n<p>Lastly I later added in <code>animationFileName</code> - this is a string referencing the file name of the animation file I'll use to illustrate each progression.</p>\n<p>So, 6 sets of exercise progressions, each of which has their own definitions of their sets and reps.</p>\n<p>With this data set up, I needed to learn how to make some 3D assets to illustrate them.</p>\n<h2 id=\"step-2-illustrations-3d-animations\" tabindex=\"-1\">Step 2: Illustrations (3D animations) <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p>I'd like to keep my options open for porting this app to Vision Pro, and a big part of that means having 3D assets.</p>\n<p>I have a small amount of 3D experience from back in college days but I was basically starting from scratch.</p>\n<h3 id=\"blender\" tabindex=\"-1\">Blender <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>To save some time, I downloaded <a href=\"http://www.blendswap.com/blends/view/74733\">this free mannequin model</a>. I'll need to find a way to add credit in the app, but hopefully this is a start.</p>\n<p>I wasn't able to make use of the model with the existing rig, so ended up setting up a new rig myself for positioning. I then created an animation for each of the 60 progressions.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/HCPlLcVefR-2554.avif 2554w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/HCPlLcVefR-2554.webp 2554w\"><img alt=\"Creating a pushup animation in Blender.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/HCPlLcVefR-2554.png\" width=\"2554\" height=\"1560\"></picture></p>\n<p>This took a while, close to 3 months. However I really like the result. Once I made the animations, the next challenge was bringing them into XCode.</p>\n<h3 id=\"file-size-issues\" tabindex=\"-1\">File size issues <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>Embedding each animation file was over 5Mb in size. For 60 animations, that would mean at least 300Mb of files just for the animations. To work around this, I ended up saving one <code>base model</code> file, exported as a Collada (dae) file, and then setting up each of the others as just the animated rig without the model's mesh.</p>\n<p>With this I could then load one 3D model, and for each animation load the animation file and apply the animation to the <code>base model</code>. This resulted in animation files around 1.5Mb each. I'm sure I could optimise more but bringing the assets under 100Mb seems like a good start.</p>\n<h3 id=\"loading-3d-files-in-xcode\" tabindex=\"-1\">Loading 3D files in Xcode <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>After a lot of Google-searching, I settled on using a <a href=\"https://developer.apple.com/documentation/scenekit/sceneview\">SceneView</a> to load the base Collada file, as well as the animation file, then apply this animation to the scene. Lastly I also grab the camera from the animation file and apply that to the scene.</p>\n<div class=\"video-wrapper\">\n    <video autoplay=\"\" muted=\"\" loop=\"\" playsinline=\"\" width=\"200\">\n    <source src=\"https://i.imgur.com/F0MSAMJ.mp4\" type=\"video/mp4\">\n    </video>\n\n<p>This method creates the scene and applies the animation and camera:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadScene</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> currentProgressionAnimationName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> isPaused<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">SCNScene</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> <span class=\"token class-name\">SCNScene</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"base-model\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">let</span> baseSceneSource <span class=\"token operator\">=</span> <span class=\"token class-name\">SCNSceneSource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>forResource<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"base-model\"</span></span><span class=\"token punctuation\">,</span> withExtension<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"dae\"</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Scene could not be loaded\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SCNScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> animationSceneSourceUrl <span class=\"token operator\">=</span> <span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>forResource<span class=\"token punctuation\">:</span> currentProgressionAnimationName<span class=\"token punctuation\">,</span> withExtension<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"dae\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">let</span> animationSceneSource <span class=\"token operator\">=</span> <span class=\"token class-name\">SCNSceneSource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> animationSceneSourceUrl<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Animation file \\\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">currentProgressionAnimationName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\\\" could not be loaded\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SCNScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> animationIdentifier <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"action_container-rig\"</span></span>\n    <span class=\"token keyword\">let</span> cameraIdentifier <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Camera\"</span></span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> animationObj <span class=\"token operator\">=</span> animationSceneSource<span class=\"token punctuation\">.</span><span class=\"token function\">entryWithIdentifier</span><span class=\"token punctuation\">(</span>animationIdentifier<span class=\"token punctuation\">,</span>\n                                                     withClass<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CAAnimation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        animationObj<span class=\"token punctuation\">.</span>repeatCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>infinity\n        scene<span class=\"token punctuation\">.</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">addAnimation</span><span class=\"token punctuation\">(</span>animationObj<span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> animationIdentifier<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Override camera position</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> animationSceneCameraNode <span class=\"token operator\">=</span> animationSceneSource<span class=\"token punctuation\">.</span><span class=\"token function\">entryWithIdentifier</span><span class=\"token punctuation\">(</span>cameraIdentifier<span class=\"token punctuation\">,</span> withClass<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SCNNode</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">let</span> existingCameraNode <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">.</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">childNode</span><span class=\"token punctuation\">(</span>withName<span class=\"token punctuation\">:</span> cameraIdentifier<span class=\"token punctuation\">,</span> recursively<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        existingCameraNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeFromParentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        scene<span class=\"token punctuation\">.</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">addChildNode</span><span class=\"token punctuation\">(</span>animationSceneCameraNode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    scene<span class=\"token punctuation\">.</span>isPaused <span class=\"token operator\">=</span> isPaused\n    scene<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>contents <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>clear\n\n    <span class=\"token keyword\">return</span> scene\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In a view, I can use this method it like this:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">SceneView</span><span class=\"token punctuation\">(</span>\n  scene<span class=\"token punctuation\">:</span> <span class=\"token function\">loadScene</span><span class=\"token punctuation\">(</span>animtionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>temporalAntialiasingEnabled<span class=\"token punctuation\">]</span> <span class=\"token comment\">// Other options can be used for control, etc</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Notice I've an <code>isPaused</code> boolean. I can use this later to generate static images from the animations for use in badges and icons.</p>\n<p>I've also set the background to <code>Color.clear</code>. However, that won't work yet. I needed some more work to give the animation a clear background.</p>\n<h3 id=\"transparent-background\" tabindex=\"-1\">Transparent background <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>Turns out a `SceneView`` doesn't support transparent backgrounds. The only way I could find to make the background transparent was to wrap the scene in a <a href=\"https://developer.apple.com/spritekit/\">SpriteKit</a> view:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">AnimationSpriteView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">var</span> animationName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> isPaused<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span>\n\n    <span class=\"token keyword\">var</span> createdScene<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SKScene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> <span class=\"token class-name\">SKScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        scene<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token class-name\">UIColor</span><span class=\"token punctuation\">.</span>clear\n        <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token class-name\">SK3DNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        scene<span class=\"token punctuation\">.</span>anchorPoint <span class=\"token operator\">=</span> <span class=\"token class-name\">CGPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        model<span class=\"token punctuation\">.</span>scnScene <span class=\"token operator\">=</span> <span class=\"token function\">loadScene</span><span class=\"token punctuation\">(</span>animationName<span class=\"token punctuation\">,</span> isPaused<span class=\"token punctuation\">:</span> isPaused<span class=\"token punctuation\">)</span>\n        scene<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> scene\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SpriteView</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">:</span> createdScene<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>allowsTransparency<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This creates a <a href=\"https://developer.apple.com/documentation/spritekit/sk3dnode\">SK3DNode</a> as a model into which I load the scene above. I had to hack at the <code>anchorPoint</code> a bit, to get the model to sit correctly in the scene but these values seemed to work.</p>\n<div class=\"video-wrapper\">\n    <video autoplay=\"\" muted=\"\" loop=\"\" playsinline=\"\" width=\"200\">\n    <source src=\"https://i.imgur.com/tMEmWl3.mp4\" type=\"video/mp4\">\n    </video>\n\n<h3 id=\"generating-icons\" tabindex=\"-1\">Generating icons <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>With animations, I can now create posed versions to use as icons. I'm jumping around a bit here, I did the icons much more recently but it fits better here.</p>\n<p>Since the animations have a transparent background, I can add some shapes behind and apply effects to make some icons:</p>\n<div style=\"max-width: 220px\">\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/YAPLCmLIYW-636.avif 636w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/YAPLCmLIYW-636.webp 636w\"><img alt=\"Some ways I can use the animation object to create static icons.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/YAPLCmLIYW-636.png\" width=\"636\" height=\"1304\"></picture>\n</div>\n<p>These icons make use of the animation view like so:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">ZStack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>complete <span class=\"token operator\">?</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>themeColor<span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> size <span class=\"token operator\">*</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> size <span class=\"token operator\">*</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">AnimationView</span><span class=\"token punctuation\">(</span>progressionAnimationName<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span> isPaused<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>complete <span class=\"token operator\">?</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">contrast</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">shadow</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> size <span class=\"token operator\">*</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>calculatedOffsets<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">)</span></code></pre>\n<p>This applies two circles within a ZStack, and scales according to a given <code>size</code> double. For the name, I'm passing a <code>pose</code> version of each animation. Since it's paused, I created a version of each animation with just a few frames, which brought down the size of each pose animation file to about 300Kb.</p>\n<p>I've learned it's possible to apply some interesting visual effect modifiers! Here I'm using <code>greyscale</code> for showing a desaturated version when the exercise is incomplete, I'm upping the <code>contrast</code> a bit, and even adding a white glowing effect with <code>shadow</code>.</p>\n<p>The <code>calculatedOffsets</code> value is from a dictionary of offsets I used to nudge each pose into the right position relative to the center of the icon. These are also expressed in points adjusted for the given <code>size</code> value, so it remains consistent at any size.</p>\n<p>I'm hoping to get one for each progression. It's a lot of files but they look great and can scale to any size.</p>\n<h2 id=\"step-3-views\" tabindex=\"-1\">Step 3: Views <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p>The structure of the app is simple enough - a home view containing today's exercises, a sheet that pops over to allow people to change each exercise's progression level, and another sheet where they can record the exercise.</p>\n<p>I wracked my brain for a while on how to make this as simple as possible, and I think a decent approach is to have the idea of an &quot;edit mode&quot; within the home view. When in edit mode, selecting an exercise opens the change-progression sheet. Otherwise, selecting an exercise should let the user record an exercise.</p>\n<p>It would be nice also if people can navigate through each day of the week (Mondays, Tuesdays, etc) and set the desired exercises to each day to manage the weekly routine.</p>\n<h3 id=\"home-view\" tabindex=\"-1\">Home view <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/VbgX4NXOpv-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/VbgX4NXOpv-1179.webp 1179w\"><img alt=\"The app's home view.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/VbgX4NXOpv-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>This is the main view of the app. It lists the exercises for the day. From here the main flow is to do a workout. Selecting an exercise or pressing the <code>Start workout</code> button opens the &quot;record exercise&quot; view in a sheet.</p>\n<h3 id=\"displaying-exercises\" tabindex=\"-1\">Displaying exercises <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>To show the right progressions, I make use of two objects persisted to <a href=\"https://developer.apple.com/documentation/foundation/userdefaults#\">UserDefaults</a>. One being a dictionary of exercises by day as <code>[Int: [ExerciseType]]</code>. Each day of the week represented by an <code>Int</code> then stores an array of exercise types.</p>\n<p>This allows me to list the right types of exercise for each day. To display the correct exercise progression, I have a store a dictionary of <code>UserExerciseStages</code>. For each <code>ExerciseType</code> I store the level and stage. I can then use that to ensure the correct progression is shown.</p>\n<p>I store these both in <code>UserDefaults</code> as the amount of data needed is small enough not to need a larger store.</p>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/mQhWZsSjw0-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/mQhWZsSjw0-1179.webp 1179w\"><img alt=\"Recording exercises.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/mQhWZsSjw0-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<h3 id=\"recording-exercises\" tabindex=\"-1\">Recording exercises <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>The content of this sheet makes use of a view I called <code>ProgressionViewer</code>. It allows for scrolling through a series of progressions, and performing actions on them.</p>\n<h3 id=\"progressionviewer\" tabindex=\"-1\">ProgressionViewer <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>The main scrolling takes place in a <a href=\"https://developer.apple.com/documentation/swiftui/scrollview\">ScrollView</a> that I control using <a href=\"https://developer.apple.com/documentation/swiftui/scrollviewreader#\">ScrollViewReader</a>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">ScrollViewReader</span> <span class=\"token punctuation\">{</span> scrollViewValue <span class=\"token keyword\">in</span>\n    <span class=\"token class-name\">ScrollView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>horizontal<span class=\"token punctuation\">,</span> showsIndicators<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HStack</span><span class=\"token punctuation\">(</span>spacing<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ForEach</span><span class=\"token punctuation\">(</span>progressions<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> displayProgression <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">//... display the progression animation, title, etc</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>displayProgression<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">onPreferenceChange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewOffsetKey</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Calculate the currently shown index</span>\n        <span class=\"token comment\">// and update the animation file name</span>\n        <span class=\"token comment\">// offsets, etc</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">scrollTargetLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This makes use of <code>id</code> set to the given progression so that I can scroll to it when needed, using:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">scrollViewValue<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span>progression<span class=\"token punctuation\">)</span></code></pre>\n<p>There's also a useful trick of making use of <a href=\"https://developer.apple.com/documentation/swiftui/view/onpreferencechange(_:perform:)\">onPreferenceChange</a> and a <code>ViewOffsetKey</code> change. This <a href=\"https://stackoverflow.com/a/62588295\">StackOverflow answer</a> gives more details.</p>\n<p>This allows me to do handy stuff like adjusting the offset of the animation when scrolling, or highlight the currently active step in the set of circles along the bottom of the screen.</p>\n<div class=\"video-wrapper\">\n    <video autoplay=\"\" muted=\"\" loop=\"\" playsinline=\"\" width=\"300\">\n    <source src=\"https://i.imgur.com/jeCpxED.mp4\" type=\"video/mp4\">\n    </video>\n\n<p>One detail to note: I'm not displaying an animation on each of the scrolling items. I found that was heavy to try to display up to 10 side by side, so instead I have one animation and I update the animation name based on scroll position when the animation is hidden with opacity.</p>\n<h3 id=\"saving-to-the-journal\" tabindex=\"-1\">Saving to the journal <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>Using the stepper to select the number of reps updates the displayed number both in the text and the button. Pressing the button then calls a function that saves a journal entry. This is made up of date, exercise details and reps. For this I use <a href=\"https://developer.apple.com/documentation/swiftdata\">SwiftData</a>. This is a fairly painless way to save the values and persist larger data sets than would be possible with <code>UserDefaults</code>.</p>\n<h3 id=\"adding-exercises\" tabindex=\"-1\">Adding exercises <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/AxUJ_93ga4-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/AxUJ_93ga4-1179.webp 1179w\"><img alt=\"Adding exercise.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/AxUJ_93ga4-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>Selecting the <code>+</code> shows a <a href=\"https://developer.apple.com/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:actions:)-46zbb\">confirmation dialog</a> containing exercise types that aren't currently in the day's routine. To keep the structure of the app simple, I chose to allow one of each type of exercise per day. Users can log more sets if they wish, or adjust the level if it's too easy or hard.</p>\n<h3 id=\"empty-state\" tabindex=\"-1\">Empty state <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/XuKE5Fu0aX-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/XuKE5Fu0aX-1179.webp 1179w\"><img alt=\"Empty home view.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/XuKE5Fu0aX-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>Empty states are an important part of any UI. I will need to add more to this screen but to make it nicer but it's good to have some kind of message to let the user know that the view isn't broken.</p>\n<h3 id=\"edit-mode\" tabindex=\"-1\">Edit mode <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/BJPF1LTeLz-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/BJPF1LTeLz-1179.webp 1179w\"><img alt=\"Home view in edit mode.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/BJPF1LTeLz-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>On the home view pressing <code>Edit</code> makes the list change to show delete and reordering UI. When in edit mode, I add in buttons to navigate between days. Selecting any of the exercises opens a <code>ProgressionViewer</code> view in a sheet but with the set of progressions being shown being the other stages of that exercise type.</p>\n<h3 id=\"changing-progressions\" tabindex=\"-1\">Changing progressions <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/XRGfzPJY-W-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/XRGfzPJY-W-1179.webp 1179w\"><img alt=\"Editing a progression.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/XRGfzPJY-W-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>The left and right arrows move between levels and stages, and the stages can be scrolled through also. Then the chosen level saved, which updates the <code>UserExerciseStages</code> stored data.</p>\n<p>This is then reflected across any instances of that exercise type through the rest of the week.</p>\n<h2 id=\"step-4-styling\" tabindex=\"-1\">Step 4: Styling <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p>This being my first app I'm working things out as I go in terms of how it looks. I'm aiming for it being simple, ideally a little fun, but bright and clear. This is something that will definitely evolve.</p>\n<p>When styling the list items, I found <a href=\"https://www.youtube.com/watch?v=tjR1hLg4-wc\">this Youtube video from Karin Prater</a> very helpful.</p>\n<h3 id=\"colors-settings\" tabindex=\"-1\">Colors settings <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<p>Rather than specify a lot of colours everywhere, I set up a <code>Colors.swift</code> file where I can extend <code>Color</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> themeColor <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> lightBg <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>gradient\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> darkBg <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>gradient\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> lightAnimationBg <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>white\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> darkAnimationBg <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> secondaryButtonBg <span class=\"token operator\">=</span> themeColor<span class=\"token punctuation\">.</span>gradient\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This will act as a central place for storing the theme. For version <code>0.1</code> I am ok with it but it definitely needs more polish.</p>\n<h3 id=\"light-and-dark-mode\" tabindex=\"-1\">Light and dark mode <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 600px; padding-top: 20px; display: flex; gap: 10px;\">\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/vfoy9oM4oo-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/vfoy9oM4oo-1179.webp 1179w\"><img alt=\"Home view in dark mode.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/vfoy9oM4oo-1179.png\" width=\"1179\" height=\"2556\"></picture>\n<picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/jZxis_J2Sh-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/jZxis_J2Sh-1179.webp 1179w\"><img alt=\"Recording exercise view in dark mode.\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/jZxis_J2Sh-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>The <code>Color</code> values include light and dark. I'm not sure yet how well this will work but I'm swapping out these in the various backgrounds and foregroundStyles using <a href=\"https://developer.apple.com/documentation/swiftui/environmentvalues/colorscheme\">@Environment(.colorScheme)</a>.</p>\n<h2 id=\"next-steps\" tabindex=\"-1\">Next steps <a class=\"header-anchor\" href=\"https://vision.rodeo/dev-diary-01/\">#</a></h2>\n<p>This post reflects a lot of work over 6 months. There's lots more to do before I'll be able to set up a Testflight and start getting some user testing. Some things I'd like to have before then:</p>\n<ul>\n<li>Onboarding screen for helping build a starting routine</li>\n<li>Icons, so many icons (one for each progression)</li>\n<li>Set up primary and secondary button styles to tidy the code a bit</li>\n<li>Add in an (initially empty) journal view to surface some useful stats or graphs</li>\n<li>App icon, other small details</li>\n</ul>\n<p>I'll try to do a regular update here. By reading this you're providing me with much-needed accountability!</p>\n</div></div></div>",
			"date_published": "2024-02-09T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/app-roundup-1/",
			"url": "https://vision.rodeo/app-roundup-1/",
			"title": "Launch Apps",
			"content_html": "<p>Developers have been working hard to create or update their apps for Apple Vision Pro. Here's a list of selected apps you might want to try out.</p>\n<p>Strap in, cancel your Netflix, and load up some amazing apps!</p>\n<p><em>Prefer to see ALL the apps?</em> There's a great list of supported visionOS apps <a href=\"https://docs.google.com/spreadsheets/d/1Kbkm_jPdgV2qwhoRFIufCass8u2k-h4Xxuj0r7tXYZo/edit?pli=1#gid=0\">in this Google doc</a>. Worth a bookmark when you're looking for new ideas.</p>\n<h2 id=\"productivity-and-lifestyle\" tabindex=\"-1\">Productivity &amp; Lifestyle <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://www.finnvoorhees.com/shortcutbuttons\">Shortcut Buttons</a> - This looks fun! Add shortcuts to locations.</p>\n<p><a href=\"https://apps.apple.com/app/fantastical-calendar/id718043190\">Fantastical</a> - award-winning calendar app with powerful features including intuitive natural language text parsing and more. Check out their <a href=\"https://flexibits.com/blog/2023/08/sneaking-a-peek-at-fantastical-on-apple-vision-pro/\">Vision Pro launch blog post</a>.</p>\n<p><a href=\"https://runestone.app/\">Runestone</a> - A beautiful plain-text editor. I can see myself building websites and blogging with this.</p>\n<p><a href=\"https://apps.apple.com/app/pcalc/id284666222\">PCalc</a> - James Thompson's powerful scientific calculator will be ready to go at launch.</p>\n<p><a href=\"https://apps.apple.com/us/app/omniplan-4/id1460319993\">OmniPlan</a> - Bringing project management timelines to the Vision Pro. Check out their <a href=\"https://www.omnigroup.com/blog/omniplan-coming-to-apple-vision-pro\">blog post</a>.</p>\n<p><a href=\"https://apps.apple.com/app/finalist-daily-planner/id6447014685\">Finalist</a> - Daily / monthly planner to keep track of life.</p>\n<p><a href=\"https://soka.appdeco.ca\">SÃ¶ka</a> - Manage your bucket lists and set new goals.</p>\n<p><a href=\"https://apps.apple.com/app/fin-budget-tracker/id1489698531\">Fin - Budget Tracker</a> - A beautiful budget app with interesting 3D-lit bar charts.</p>\n<p><a href=\"https://apps.apple.com/app/crouton-recipe-manager/id1461650987\">Crouton</a> - Beautiful recipe manager and meal planner.</p>\n<p><a href=\"https://apps.apple.com/app/j-crew/id1636531300\">J.Crew</a> - Fashion shopping.</p>\n<p><a href=\"https://apps.apple.com/app/focus-productivity-timer/id975017240\">Focus</a> - Pomodoro time-tracking app for productivity.</p>\n<p><a href=\"https://apps.apple.com/us/app/moosti/id1480602835\">Moosti</a> - Attractive pomodoro / mindfulness app.</p>\n<p><a href=\"https://eyen.fr/subjects/\">Subjects</a> - Easily manage school subjects and schedules.</p>\n<p><a href=\"https://www.swankyshark.com/great-white-board.html\">Great White Board</a> - A minimalist, fun shared whiteboard experience.</p>\n<p><a href=\"https://apps.apple.com/app/bezel-device-mirroring/id6476657945\">Bezel - Device Mirroring</a> - Mirror your iPhone in full detail as a 3D model. <a href=\"https://getbezel.app/vision/\">More info here</a>.</p>\n<h2 id=\"music\" tabindex=\"-1\">Music <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/us/app/spatial-symphony/id6476616491\">Spatial Symphony</a> - Create custom soundscapes with hand-controlled music synthesis.</p>\n<p><a href=\"https://apps.apple.com/app/djay-dj-app-ai-mixer/id450527929\">djay</a> - Virtual decks and mixing optimised for an immersive experience.</p>\n<p><a href=\"https://apps.apple.com/app/piano-flowing-tiles/id6472594978\">Piano: Flowing Tiles</a> - Guided piano playing in AR.</p>\n<p><a href=\"https://longplay.rocks/\">LongPlay</a> - Rediscover, enjoy and organise your album collection.</p>\n<p><a href=\"https://apps.apple.com/app/spool-music-video-editor/id1604274234\">Spool</a> - Create visuals for your music.</p>\n<h2 id=\"health\" tabindex=\"-1\">Health <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/app/complete-heartx/id6450795770\">Complete HeartX</a> - Explore how the heart works.</p>\n<p><a href=\"https://apps.apple.com/app/vibescape/id6476827678\">VibeScape</a> - Immersive meditation with unique locations. Check out <a href=\"https://www.apposite.ai/vibescape.html\">the blog post</a>.</p>\n<p><a href=\"https://apps.apple.com/app/lungy-interactive-breathing/id1545223887\">Lungy</a> - A deeply beautiful breathing app that applies a little medical rigor.</p>\n<p><a href=\"https://apps.apple.com/us/app/calisthenics-crossfit-coachy/id1534754095\">Coachy</a> - Bodyweight fitness workouts.</p>\n<h2 id=\"sports\" tabindex=\"-1\">Sports <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/us/app/pga-tour-vision/id6471858717\">PGA Tour Vision</a> - Experience golf like never before.</p>\n<p><a href=\"https://apps.apple.com/app/nba-live-games-scores/id484672289\">NBA</a> - Live scores and insights on basketball stuff.</p>\n<p><a href=\"https://apps.apple.com/app/mlb/id493619333\">MLB</a> - Live baseball and on-demand.</p>\n<p><a href=\"https://apps.apple.com/app/espn-live-sports-scores/id317469184\">ESPN</a> - Live sports and scores.</p>\n<p><a href=\"https://apps.apple.com/app/discovery-stream-tv-shows/id395972146\">Discovery+</a> - TV show streaming.</p>\n<p><a href=\"https://apps.apple.com/app/crunchyroll/id329913454\">Crunchyroll</a> - Anime streaming.</p>\n<p><a href=\"https://apps.apple.com/app/cricket-scores-live-matches/id1616385207\">Cricket Scores Live Matches</a> - Cricket stats and live streams.</p>\n<h2 id=\"entertainment\" tabindex=\"-1\">Entertainment <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/app/disney/id1446075923\">Disney+</a> - All the usual Disney content including 3D movies, custom environments and more.</p>\n<p><a href=\"https://apps.apple.com/app/play-save-videos-watch-later/id1596506190\">Play</a> - Save videos to watch later.</p>\n<h2 id=\"education\" tabindex=\"-1\">Education <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/app/study-snacks-playful-learning/id6444380323\">Study Snacks</a> - Playful learning.</p>\n<p><a href=\"https://www.studioamanga.com/memorii/\">Memorii</a> - Flashcards for learning Chinese hanzi, Japanese kanji, and Korean hangul.</p>\n<h2 id=\"games\" tabindex=\"-1\">Games <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/us/app/game-room/id1642897935\">Game Room</a> - A collection of tabletop games in an immersive environment.</p>\n<p><a href=\"https://apps.apple.com/app/what-the-golf/id1415190483\">What the Golf</a> - Quirky golf game. Check the <a href=\"https://www.reddit.com/r/VisionPro/comments/19epb4f/what_the_golf_app_trailer/\">Vision Pro promo video</a>.</p>\n<p><a href=\"https://apps.apple.com/app/cut-the-rope-3/id997332884\">Cut the Rope</a> - Cute physics-based puzzler.</p>\n<p><a href=\"https://apps.apple.com/app/demeo/id6463004635\">Demeo</a> - Tabletop RPG simulator.</p>\n<p><a href=\"https://apps.apple.com/us/app/vision-ploppy-pairs-full-space/id6472619150\">Ploppy Pairs</a> - A colorful fun memory game.</p>\n<p><a href=\"https://apps.apple.com/app/void-x/id1622479769\">Void-X</a> - A bullethell game with interesting particle effects.</p>\n<p><a href=\"https://apps.apple.com/app/steam-link/id1246969117\">Steam Link</a> - Play your Steam library on a massive virtual screen.</p>\n<p><a href=\"https://gametrack.app/\">Gametrack</a> - Track and share your gaming life.</p>\n<p><a href=\"https://apps.apple.com/us/app/kattam/id6476475799\">Kattam</a> - Not sure yet but should be a game available at launch. Check back for details.</p>\n<h2 id=\"developer-tools\" tabindex=\"-1\">Developer tools <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://telemetrydeck.com\">TelemetryDeck</a> - Privacy-first visitor tracking. Check out <a href=\"https://telemetrydeck.com/blog/vision-pro-ready/\">the TelemetryDeck Vision Pro blog post</a>.</p>\n<p><a href=\"https://apps.apple.com/app/spatial-effects/id6476788209\">Spatial Effects</a> - A particle emitter playground. Step into a world where your imagination comes to life with Spatial Effects!</p>\n<p><a href=\"https://thatvirtualboy.com/bentocraft\">Bento|Craft</a> - Create beautiful promotional artwork to highlight your app's features.</p>\n<h2 id=\"other-stuff\" tabindex=\"-1\">Other Stuff <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/app/widgetsmith/id1523682319\">Widgetsmith</a> - Create a personal experience with a wide range of widgets.</p>\n<p><a href=\"https://apps.apple.com/app/jigspace-3d-presentations/id6456791766\">JigSpace</a> - Explore 3D objects.</p>\n<p><a href=\"https://viac.app/\">Voice in a Can</a> - Virtual Alexa assistant.</p>\n<p><a href=\"https://apps.apple.com/app/carrot-weather/id993487541?mt=12\">Carrot Weather</a> - A crazy-powerful (and privacy-conscious) weather app.</p>\n<p><a href=\"https://apps.apple.com/au/app/mercury-weather/id1621800675\">Mercury Weather</a> - A fun and beautiful weather app.</p>\n<p><a href=\"https://plantdaddy.app/\">Plant Daddy</a> - The modÂ­ern, cute little place to keep track of your plantsâ€™ needs.</p>\n<p><a href=\"https://apps.apple.com/us/app/navi-subtitles-translation/id1573261774\">Navi - Subtitles &amp; Translation</a> - Adds transcriptions to Facetime calls through SharePlay. See the <a href=\"https://twitter.com/spatialreport/status/1749215350019833922/mediaViewer?currentTweet=1749215350019833922&amp;currentTweetUser=spatialreport\">demo video here</a>.</p>\n<p><a href=\"https://apps.apple.com/app/night-sky/id475772902\">Night Sky</a> - See what's above you. I'm really looking forward to what this could bring.</p>\n<p><a href=\"https://apps.apple.com/us/app/quiet/id1441525727\">Quiet</a> - A content blocker to reclaim your Safari browsing experience. Read <a href=\"https://petercammeraat.net/journal/2024/quiet-4-2-new-app-icon-and-visionos-support/\">the Vision Pro blog post here</a>.</p>\n<p><a href=\"https://apps.apple.com/app/ocean-chill/id6476815660\">Ocean Chill</a> - Relaxing ocean vibes.</p>\n<h2 id=\"got-any-others\" tabindex=\"-1\">Got any others? <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p>If you hear of a cool app you'd like me to add to this or the next roundup, <a href=\"mailto:vision-links@hop.ie\">let me know</a>.</p>\n",
			"date_published": "2024-01-29T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/vision/",
			"url": "https://vision.rodeo/vision/",
			"title": "Appleâ€™s Vision",
			"content_html": "<p>Let's discuss the <em>vision</em> in Apple Vision Pro, and what this product represents.</p>\n<h2 id=\"looking-to-the-future\" tabindex=\"-1\">Looking to the future <a class=\"header-anchor\" href=\"https://vision.rodeo/vision/\">#</a></h2>\n<p>Imagine we could make use of technology without being bound by screens. All while living our day to day lives. Seamlessly blending the virtual with reality.</p>\n<p>This is what AR (augmented reality) promises, and we are not there yet. Camera and screen technology is only now reaching a level where we can present our surroundings at a high enough fidelity to be considered AR, and even then the headsets are bulky and not the most comfortable experience.</p>\n<p>The vision of AR is that technology will enable a seamless integration of our computing lives with the real world around us. I think this headset from Apple is a step toward making it a reality.</p>\n<h3 id=\"simulations-in-simulations\" tabindex=\"-1\">Simulations in simulations <a class=\"header-anchor\" href=\"https://vision.rodeo/vision/\">#</a></h3>\n<p>When we build apps on our computers using Xcode's simulator, it simulates the experience of how the app would look in Vision Pro. This allows us to have some idea of what it will be like when the app is used by a user on the device.</p>\n<p>I see the Vision Pro headset as a simulator for what a truly augmented reality would look like. Just as the simulator on Xcode is a two-dimensional proxy to the real thing, this headset from Apple uses cameras (and some clever algorithms) to represent what we'd see without any headset. It then adds the our apps and content, as if they were in the real world around us.</p>\n<p>This differs from other headsets whose purpose was virtual environments. These devices purpose is to take the user into a new space and present all-encompassing 3D experiences. These are great and have many uses, but I don't think VR (virtual reality) is Apple's primary goal.</p>\n<p>The lack of emphasis on games is an example. Until now, the primary goal of VR headsets has been gaming and socialising within virtual worlds.</p>\n<p>Vision Pro is more about presenting us with our own world, which is then augmented.</p>\n<h2 id=\"a-platform-for-experimentation-and-learning\" tabindex=\"-1\">A platform for experimentation and learning <a class=\"header-anchor\" href=\"https://vision.rodeo/vision/\">#</a></h2>\n<p>I think Apple is trying to make a very good headset that will be fantastic for both VR and AR experiences. Apple wants people to be able to step away from their world into entirely new spaces, but I don't think VR is the whole game. This is a new platform in which we can work out what works or doesn't work in a platform that aims to ground us in our own world.</p>\n<p>Just as the original iPhone emphasised touch as an input, this headset will encourage developers to experiment with controller-free eye tracking and hand tracking. It will allow us to build applications that explode out of the bounds of the screens, and make use of the infinite canvas all around.</p>\n<p>It will allow us to work toward a future of computing in which we remain better connected to our environment and those around us while also enjoying all the benefits our technology offers.</p>\n<h2 id=\"a-first-step\" tabindex=\"-1\">A first step <a class=\"header-anchor\" href=\"https://vision.rodeo/vision/\">#</a></h2>\n<p>Many commenters have suggested that this is a beta test of a product, or an prototype, and in a sense I agree. This headset is a bulky, power-hungry device that is not something many people will want to wear all day.</p>\n<p>For that reason I see this as the first step toward a new approach to <a href=\"https://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction\">human-computer interation</a>. It's not there yet, but this is glimpse of how it could be.</p>\n",
			"date_published": "2024-01-28T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/hello/",
			"url": "https://vision.rodeo/hello/",
			"title": "hello",
			"content_html": "<p>This is my first post while I get things started on this little site about <a href=\"https://www.apple.com/apple-vision-pro/\">Apple Vision Pro</a>!</p>\n<p>I'm looking forward to learning how this new tech will work, as well as building apps for it in SwiftUI.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/SOFWriN75L-800.avif 800w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/SOFWriN75L-800.webp 800w\"><img alt=\"The classic Apple Hello text in Vision Pro\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/SOFWriN75L-800.jpeg\" width=\"800\" height=\"450\"></picture></p>\n<h2 id=\"why-apple-vision-pro\" tabindex=\"-1\">Why Apple Vision Pro? <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>I'm a web designer and developer and have been working on the web for over 20 years. When I began creating web sites, CSS was brand new and web browsers were a lot more primative than they are today, but the platform was new and exciting.</p>\n<p>Being able to design, create and publish my ideas for the world to see from the comfort of my sofa was a revolutionary time. The web has since grown to become simultaneously more important but also more mundane. It's possible to create random little sites like this but few people do, and it feels like less of a world wild web and more dominated by heterogenous, large platforms.</p>\n<p>The iPhone was <a href=\"https://en.wikipedia.org/wiki/IPhone\">launched almost 16 years ago</a>, and has created it's own wonderful ecosystem of creativity. It introduced the first good implementation of a touch-based interface and made the internet available in a pocket-sized device to everyone.</p>\n<p>Building apps was also something within reach of a solo developer. The tools to build on iOS have continued to to get better and better, while the technology has become more refined. Which leads to what I hope will be another exciting stage in technology, <a href=\"https://en.wikipedia.org/wiki/Spatial_computing\">spatial computing</a>.</p>\n<h2 id=\"spatial-computing-vs-vr\" tabindex=\"-1\">Spatial computing vs VR <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>Most headsets aim for a primarily <a href=\"https://en.wikipedia.org/wiki/Virtual_reality\">virtual reality</a> (VR) approach, in which the user is placed into an entirely simulated environment. As technology has improved this has created some amazing, immersive games and simulations.</p>\n<p>What is more tricky is supporting <a href=\"https://en.wikipedia.org/wiki/Augmented_reality\">augmented reality</a> (AR). This when the real world is visible and a computer overlays items on top. To do this requires cameras, lots of smart code to adjust and shape the camera input to look right, as well as sensors to detect where the headset is and where the user is looking.</p>\n<p>With all these pieces in place, the headset can then render visual elements within the video stream and make it look like your computer and the real world are intermingled. The result, if done well, allows us to explore computing beyond the constraint of screens.</p>\n<p>As much as laptops are amazing devices, having a seemingly infinite canvas within which 3D computing elements can be placed is a big step forward.</p>\n<h2 id=\"apple-s-difference\" tabindex=\"-1\">Apple's difference <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>Compared to other platforms such as the <a href=\"https://en.wikipedia.org/wiki/Meta_Quest_3\">Meta Quest</a> or <a href=\"https://en.wikipedia.org/wiki/PlayStation_VR\">PlayStation VR</a>, Apple has taken a different approach.</p>\n<p>Where the previously mentioned headsets are designed and marketed primarily as gaming devices, Apple has promoted their headset as an entertainment and creative productivity device.</p>\n<p>I'm sure there'll be games, and maybe I'll try making some. However with no controllers, and a much more expensive device, the value I'm hoping Vision Pro will bring will be much more than games.</p>\n<p>It's like when laptops were dull, beige and focused on office productivity, and Apple promoted their laptops as <em>creative</em> tools. The Vision Pro is being positioned as a device that will bring spatial computing and be a creative tool rather than just got gaming.</p>\n<h2 id=\"cutting-edge-technology\" tabindex=\"-1\">Cutting-edge technology <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>Apple's Vision Pro combines the highest fidelity of passthrough video, with state of the art eye tracking, and a (hopefully) expansive array of applications.</p>\n<h2 id=\"so-what-s-this-blog-about\" tabindex=\"-1\">So what's this blog about? <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>I'm interested in exploring what this new platform offers, from a developer's perspective. I'd like to ask questions such as how we build spatial experiences, what makes a good Vision Pro app, and how we find inspiration as this platform emerges.</p>\n<p>I have a lot to learn and I find blogging about it can be a great way to reinforce my learning. It's fun too.</p>\n<p>Time will tell if the device is worth the asking price. Developers will explore the capabilities and build apps to see what it can do. I'm excited to be in a position to learn how to build apps for this platform, and I'll continue documenting this journey here.</p>\n",
			"date_published": "2024-01-26T00:00:00Z"
		}
		
	]
}
