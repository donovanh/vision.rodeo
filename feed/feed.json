{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Donovan’s Vision Blog",
	"language": "en",
	"home_page_url": "https://vision.rodeo/",
	"feed_url": "https://vision.rodeo/feed/feed.json",
	"description": "Build great apps for Apple Vision Pro",
	"author": {
		"name": "Donovan Hutchinson",
		"url": "https://hop.ie"
	},
	"items": [
		{
			"id": "https://vision.rodeo/tabletopkit/",
			"url": "https://vision.rodeo/tabletopkit/",
			"title": "TabletopKit",
			"content_html": "<p>For a while I've been looking for a way to make my <a href=\"https://blockstack.hop.ie\">BlockStack vision pro game</a> a multiplayer experience. Currently it's just a simple one-player game but it would be more fun if played with others.</p>\n<p>To make this happen, Apple has a framework called <a href=\"https://developer.apple.com/design/human-interface-guidelines/shareplay\">Shareplay</a>. I've been trying to work with it, but so far haven't been able to work out how to get it to share... or play. As an alternative, I'm looking into a framework specifically designed to wrap Shareplay and enable <code>tabletop</code> gaming, called <a href=\"https://developer.apple.com/documentation/tabletopkit\">TabletopKit</a>.</p>\n<p>This is also tricky but having watched a <a href=\"https://vision.rodeo/arctic-2025-day-2/#mikaela-caron-creating-games-with-tabletopkit-for-visionos\">talk from Mikaela Caron</a> on creating a TabletopKit game, I thought I should go back to basics and try to learn this framework.</p>\n<p>With that in mind, here's what I've learned so far. I've set up the following code as a <a href=\"https://github.com/donovanh/tabletopkitexample\">Git repo here</a>.</p>\n<h2 id=\"result\" tabindex=\"-1\">Result <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h2>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/mYLLdov\" data-context=\"false\"><a href=\"https://imgur.com/a/mYLLdov\">Blockstack in TabletopKit</a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<p>In building this demo I have learned that while <code>TabletopKit</code> has many useful tools, it's not a great fit for a physics-based project such as Blockstack.</p>\n<p>The pieces can clip through others. They don't push other pieces over or fall using physics. There may be ways around this but this is as far as I've got so far.</p>\n<p>However, the setup below might prove useful when starting new projects.</p>\n<h2 id=\"tabletopkit-setup\" tabindex=\"-1\">TabletopKit setup <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h2>\n<p>A TabletopKit app needs the following in place:</p>\n<ul>\n<li>A volumetric window</li>\n<li>A table</li>\n<li>Seats at the table</li>\n<li>Equipment (the parts of the game people interact with)</li>\n<li>Interaction logic</li>\n<li>Observation logic</li>\n<li>SharePlay</li>\n</ul>\n<h3 id=\"setting-up-app-with-volumetric-window\" tabindex=\"-1\">Setting up app with Volumetric window <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>The app begins with the <code>App</code>, which contains a single <code>WindowGroup</code> set to display out <code>GameView</code> as a volumetric window:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">WindowGroup</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"game\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">GameView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">volumeBaseplateVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">windowStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>volumetric<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">volumeWorldAlignment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>gravityAligned<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">defaultSize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>meters<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This won't work out of the box, as one other setup step is to update <code>Info.plist</code> and set <code>Preferred Default Scene Session Role</code> to <code>Volumetric Window Application Session Role</code>.</p>\n<p>Now when the app runs, it'll open a volumetric window as the only window.</p>\n<h3 id=\"gameview\" tabindex=\"-1\">GameView <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>Our <code>GameView</code> is where the game is to be displayed. It uses a <code>RealityView</code> into which the game loads all <code>entities</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKitContent</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">TabletopKit</span>\n\n<span class=\"token attribute atrule\">@MainActor</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">GameView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> game<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Game</span><span class=\"token operator\">?</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> activityManager<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GroupActivityManager</span><span class=\"token operator\">?</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ZStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> loadedGame <span class=\"token operator\">=</span> game <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">RealityViewContent</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n                    content<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loadedGame<span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">tabletopGame</span><span class=\"token punctuation\">(</span>loadedGame<span class=\"token punctuation\">.</span>tabletopGame<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">:</span> loadedGame<span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token omit keyword\">_</span> <span class=\"token keyword\">in</span>\n                    <span class=\"token class-name\">GameInteraction</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">:</span> loadedGame<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>game <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token class-name\">Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>activityManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>tabletopGame<span class=\"token punctuation\">:</span> game<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>tabletopGame<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The code above runs a <code>task</code> that loads the game. It also instantiates the <code>GroupActivityManager</code>, which handles Shareplay.</p>\n<p>Lastly the <code>RealityView</code> has a <code>tabletopGame</code> modifier which sets up the game interaction logic.</p>\n<h3 id=\"game\" tabindex=\"-1\">Game <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>The <code>GameView</code> calls the <code>Game</code> class. This brings together the setup of the <code>tabletop</code> and <code>renderer</code>, adds observers, renderers and sets up the initial seating.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Observable</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tabletopGame<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopGame</span>\n    <span class=\"token keyword\">let</span> renderer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GameRenderer</span>\n    <span class=\"token keyword\">let</span> observer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GameObserver</span>\n    <span class=\"token keyword\">let</span> setup<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GameSetup</span>\n\n    <span class=\"token attribute atrule\">@MainActor</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n        renderer <span class=\"token operator\">=</span> <span class=\"token class-name\">GameRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        setup <span class=\"token operator\">=</span> <span class=\"token class-name\">GameSetup</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">:</span> renderer<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n\n        tabletopGame <span class=\"token operator\">=</span> <span class=\"token class-name\">TabletopGame</span><span class=\"token punctuation\">(</span>tableSetup<span class=\"token punctuation\">:</span> setup<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">)</span>\n\n        observer <span class=\"token operator\">=</span> <span class=\"token class-name\">GameObserver</span><span class=\"token punctuation\">(</span>tabletop<span class=\"token punctuation\">:</span> tabletopGame<span class=\"token punctuation\">,</span> renderer<span class=\"token punctuation\">:</span> renderer<span class=\"token punctuation\">)</span>\n        tabletopGame<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span>\n\n        tabletopGame<span class=\"token punctuation\">.</span><span class=\"token function\">addRenderDelegate</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">)</span>\n        renderer<span class=\"token punctuation\">.</span>game <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n\n        tabletopGame<span class=\"token punctuation\">.</span><span class=\"token function\">claimAnySeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        tabletopGame<span class=\"token punctuation\">.</span><span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span>\n        tabletopGame<span class=\"token punctuation\">.</span><span class=\"token function\">removeRenderDelegate</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"gamerenderer\" tabindex=\"-1\">GameRenderer <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>The game renders through a root <code>entity</code>. I've adjusted it to rotate the table 45 degrees to better see the result:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@MainActor</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GameRenderer</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopGame</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RenderDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> root<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Entity</span>\n    <span class=\"token keyword\">let</span> rootOffset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vector3D</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GameMetrics</span><span class=\"token punctuation\">.</span>tableThickness<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> game<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Game</span><span class=\"token operator\">?</span>\n\n    <span class=\"token attribute atrule\">@MainActor</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root <span class=\"token operator\">=</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>translation <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>rootOffset<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">let</span> rotation <span class=\"token operator\">=</span> <span class=\"token function\">simd_quatf</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span>pi <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> axis<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        root<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>rotation <span class=\"token operator\">=</span> rotation\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"gamesetup\" tabindex=\"-1\">GameSetup <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>The minimum setup requires a table and seating. This is enough to get a tabletop kit app to run (and some testing blocks to illustrate the interactions):</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@MainActor</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GameSetup</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> root<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Entity</span>\n    <span class=\"token keyword\">var</span> setup<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSetup</span>\n    <span class=\"token keyword\">var</span> seats<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">PlayerSeat</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root\n        setup <span class=\"token operator\">=</span> <span class=\"token class-name\">TableSetup</span><span class=\"token punctuation\">(</span>tabletop<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// Adding player seats</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> pose<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token class-name\">PlayerSeat</span><span class=\"token punctuation\">.</span>seatPoses<span class=\"token punctuation\">.</span><span class=\"token function\">enumerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> seat <span class=\"token operator\">=</span> <span class=\"token class-name\">PlayerSeat</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSeatIdentifier</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pose<span class=\"token punctuation\">:</span> pose<span class=\"token punctuation\">)</span>\n            seats<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>seat<span class=\"token punctuation\">)</span>\n            setup<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>seat<span class=\"token punctuation\">:</span> seat<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Adding some blocks for testing</span>\n        <span class=\"token keyword\">let</span> blockWidth<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.04</span>\n\n        <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span><span class=\"token number\">30</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> orientation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                orientation <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                orientation <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span>pi <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> index <span class=\"token operator\">/</span> <span class=\"token number\">3</span>\n            <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>\n            <span class=\"token keyword\">let</span> z<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>\n\n            <span class=\"token keyword\">if</span> row <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                x <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> blockWidth\n                z <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                x <span class=\"token operator\">=</span> blockWidth\n                z <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> blockWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> blockWidth\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">let</span> blockPosition <span class=\"token operator\">=</span> <span class=\"token class-name\">TableVisualState</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Point2D</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> z<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> block <span class=\"token operator\">=</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>idGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">newId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">:</span> blockPosition<span class=\"token punctuation\">,</span> orientation<span class=\"token punctuation\">:</span> orientation<span class=\"token punctuation\">)</span>\n\n            setup<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>equipment<span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"blocks\" tabindex=\"-1\">Blocks <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>While not part of <code>TabletopKit</code>, I wanted something to test the interaction so the following is used to generate the blocks (<code>Block</code> class above):</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> pieceWidth<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.0375</span>\n    <span class=\"token keyword\">let</span> pieceHeight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.0225</span>\n    <span class=\"token keyword\">let</span> pieceLength<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.1125</span>\n\n    <span class=\"token keyword\">var</span> metallicMaterial <span class=\"token operator\">=</span> <span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    metallicMaterial<span class=\"token punctuation\">.</span>metallic <span class=\"token operator\">=</span> <span class=\"token class-name\">MaterialScalarParameter</span><span class=\"token punctuation\">(</span>floatLiteral<span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n    metallicMaterial<span class=\"token punctuation\">.</span>roughness <span class=\"token operator\">=</span> <span class=\"token class-name\">MaterialScalarParameter</span><span class=\"token punctuation\">(</span>floatLiteral<span class=\"token punctuation\">:</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> boxShape<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MeshResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>\n        width<span class=\"token punctuation\">:</span> pieceWidth<span class=\"token punctuation\">,</span>\n        height<span class=\"token punctuation\">:</span> pieceHeight<span class=\"token punctuation\">,</span>\n        depth<span class=\"token punctuation\">:</span> pieceLength<span class=\"token punctuation\">,</span>\n        cornerRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0025</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> piece <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> boxShape<span class=\"token punctuation\">,</span>\n        materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>metallicMaterial<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Physics</span>\n    <span class=\"token keyword\">let</span> physicsMaterial <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicsMaterialResource</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>\n        staticFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>\n        dynamicFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>\n        restitution<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span>\n\n    piece<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n            shape<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>\n                width<span class=\"token punctuation\">:</span> pieceWidth<span class=\"token punctuation\">,</span>\n                height<span class=\"token punctuation\">:</span> pieceHeight<span class=\"token punctuation\">,</span>\n                depth<span class=\"token punctuation\">:</span> pieceLength\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            mass<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        material<span class=\"token punctuation\">:</span> physicsMaterial<span class=\"token punctuation\">,</span>\n        mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Shadow</span>\n    piece<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroundingShadowComponent</span><span class=\"token punctuation\">(</span>castsShadow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Input</span>\n    piece<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputTargetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Sound</span>\n    piece<span class=\"token punctuation\">.</span>spatialAudio <span class=\"token operator\">=</span> <span class=\"token class-name\">SpatialAudioComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Collisions</span>\n    piece<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> piece\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"gamemetrics\" tabindex=\"-1\">GameMetrics <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>To make configuration easier, we set up some shared variables:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">GameMetrics</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> tableEdge<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> tableThickness<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.025</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.35</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"adding-game-equipment\" tabindex=\"-1\">Adding game equipment <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>With the game view, setup logic and rendering logic, we can add the basic <code>equipment</code>. In this case it's a simple round table and a seating plan (with 3 seats):</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">EquipmentIdentifier</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> tableID<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Table</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">EntityTabletop</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> shape<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopShape</span>\n    <span class=\"token keyword\">var</span> entity<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Entity</span>\n    <span class=\"token keyword\">var</span> id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">EquipmentIdentifier</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> newTableEntity <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n            mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateCylinder</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GameMetrics</span><span class=\"token punctuation\">.</span>tableThickness<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GameMetrics</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>brown<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        newTableEntity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"table\"</span></span>\n\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>entity <span class=\"token operator\">=</span> newTableEntity\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">:</span> entity<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>tableID\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Block</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">EntityEquipment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">EquipmentIdentifier</span>\n    <span class=\"token keyword\">var</span> entity<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Entity</span>\n    <span class=\"token keyword\">var</span> initialState<span class=\"token punctuation\">:</span> <span class=\"token class-name\">BaseEquipmentState</span>\n\n    <span class=\"token attribute atrule\">@MainActor</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableVisualState</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Point2D</span><span class=\"token punctuation\">,</span> orientation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        id <span class=\"token operator\">=</span> <span class=\"token class-name\">EquipmentIdentifier</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">let</span> newEntity <span class=\"token operator\">=</span> <span class=\"token function\">generateBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        newEntity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Block-</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">index</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n\n        <span class=\"token keyword\">let</span> rotation <span class=\"token operator\">=</span> <span class=\"token class-name\">Angle2D</span><span class=\"token punctuation\">(</span>radians<span class=\"token punctuation\">:</span> orientation<span class=\"token punctuation\">)</span>\n\n        initialState <span class=\"token operator\">=</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span>\n            parentID<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>tableID<span class=\"token punctuation\">,</span>\n            pose<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">:</span> position<span class=\"token punctuation\">,</span> rotation<span class=\"token punctuation\">:</span> rotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            entity<span class=\"token punctuation\">:</span> newEntity\n        <span class=\"token punctuation\">)</span>\n        entity <span class=\"token operator\">=</span> newEntity\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PlayerSeat</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSeat</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token constant\">ID</span>\n     <span class=\"token keyword\">var</span> initialState<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSeatState</span>\n\n     <span class=\"token attribute atrule\">@MainActor</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> seatPoses<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">TableVisualState</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Pose2D</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n         <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameMetrics</span><span class=\"token punctuation\">.</span>tableEdge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rotation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">degrees</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameMetrics</span><span class=\"token punctuation\">.</span>tableEdge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rotation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">degrees</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameMetrics</span><span class=\"token punctuation\">.</span>tableEdge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rotation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">degrees</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">]</span>\n\n     <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSeatIdentifier</span><span class=\"token punctuation\">,</span> pose<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableVisualState</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Pose2D</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id\n         <span class=\"token keyword\">let</span> spatialSeatPose<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableVisualState</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Pose2D</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">:</span> pose<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span>\n                                                              rotation<span class=\"token punctuation\">:</span> pose<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">)</span>\n         initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>pose<span class=\"token punctuation\">:</span> spatialSeatPose<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre>\n<p>There are different types of equipment. When using entities for custom equipment, <code>EntityEquipment</code> is ideal. In the example above, I have added a sinple <code>Block</code> struct so we can add some interactive elements.</p>\n<p><code>TabletopKit</code> also brings useful tools such as dice.</p>\n<h3 id=\"gameinteraction\" tabindex=\"-1\">GameInteraction <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>With the equipment in place, we can add some boilerplate for when we want interactions.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">GameInteraction</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopInteraction</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Delegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> game<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Game</span>\n\n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">update</span><span class=\"token punctuation\">(</span>interaction<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopKit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TabletopInteraction</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> equipment <span class=\"token operator\">=</span> interaction<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>controlledEquipmentID\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> destination <span class=\"token operator\">=</span> interaction<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>proposedDestination <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> interaction<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>phase <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>ended <span class=\"token punctuation\">{</span>\n            interaction<span class=\"token punctuation\">.</span><span class=\"token function\">addAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token function\">moveEquipment</span><span class=\"token punctuation\">(</span>matching<span class=\"token punctuation\">:</span> equipment<span class=\"token punctuation\">,</span> childOf<span class=\"token punctuation\">:</span> destination<span class=\"token punctuation\">.</span>equipmentID<span class=\"token punctuation\">,</span> pose<span class=\"token punctuation\">:</span> destination<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This makes use of an <code>update</code> method that passes an <code>interaction.value.phase</code> that can be <code>.started</code> or <code>.ended</code> along with an <code>interaction.value.gesture?.phase</code> for more control. In this code we move the equipment to where it is left.</p>\n<p>Restrictions on where equipment can be moved can be configured.</p>\n<h3 id=\"gameobserver\" tabindex=\"-1\">GameObserver <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>The interactions set up <code>actions</code>, as above in <code>interaction.addAction</code>. These can be observed in the <code>GameObserver</code> class for other actions such as updating game state.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GameObserver</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopGame</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tabletop<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopGame</span>\n    <span class=\"token keyword\">let</span> renderer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GameRenderer</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>tabletop<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopGame</span><span class=\"token punctuation\">,</span> renderer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GameRenderer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tabletop <span class=\"token operator\">=</span> tabletop\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">=</span> renderer\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">actionIsPending</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> action<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">TabletopAction</span><span class=\"token punctuation\">,</span> oldSnapshot<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSnapshot</span><span class=\"token punctuation\">,</span> newSnapshot<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> action <span class=\"token operator\">=</span> action <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">MoveEquipmentAction</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"actionIsPending:  </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">action</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">actionWasConfirmed</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> action<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">TabletopAction</span><span class=\"token punctuation\">,</span> oldSnapshot<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSnapshot</span><span class=\"token punctuation\">,</span> newSnapshot<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"actionWasConfirmed:  </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">action</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">playerChangedSeats</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> player<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">,</span> oldSeat<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>any <span class=\"token class-name\">TableSeat</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> newSeat<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>any <span class=\"token class-name\">TableSeat</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TableSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> player<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> tabletop<span class=\"token punctuation\">.</span>localPlayer<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> newSeat <span class=\"token operator\">==</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">{</span>\n            tabletop<span class=\"token punctuation\">.</span><span class=\"token function\">claimAnySeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"groupactivitymanager\" tabindex=\"-1\">GroupActivityManager <a class=\"header-anchor\" href=\"https://vision.rodeo/tabletopkit/\">#</a></h3>\n<p>To bring it all together, we set up a group activity session:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">GroupActivities</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token attribute atrule\">@preconcurrency</span> <span class=\"token keyword\">import</span> <span class=\"token class-name\">TabletopKit</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Activity</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">GroupActivity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> metadata<span class=\"token punctuation\">:</span> <span class=\"token class-name\">GroupActivityMetadata</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> metadata <span class=\"token operator\">=</span> <span class=\"token class-name\">GroupActivityMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        metadata<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>generic\n        metadata<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"TabletopKitExample\"</span></span>\n        <span class=\"token keyword\">return</span> metadata\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupActivityManager</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Observable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> tabletopGame<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopGame</span>\n    <span class=\"token keyword\">var</span> sessionTask <span class=\"token operator\">=</span> <span class=\"token class-name\">Task</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>tabletopGame<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TabletopGame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tabletopGame <span class=\"token operator\">=</span> tabletopGame\n        sessionTask <span class=\"token operator\">=</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span> <span class=\"token attribute atrule\">@MainActor</span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> session <span class=\"token keyword\">in</span> <span class=\"token class-name\">Activity</span><span class=\"token punctuation\">.</span><span class=\"token function\">sessions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tabletopGame<span class=\"token punctuation\">.</span><span class=\"token function\">coordinateWithSession</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        tabletopGame<span class=\"token punctuation\">.</span><span class=\"token function\">detachNetworkCoordinator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>You can see the <a href=\"https://github.com/donovanh/tabletopkitexample\">full project on Github here</a>.</p>\n",
			"date_published": "2025-03-16T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/arctic-2025-day-2/",
			"url": "https://vision.rodeo/arctic-2025-day-2/",
			"title": "ARCtic iOS conference 2025 - Day 2",
			"content_html": "<p>After a great <a href=\"https://vision.rodeo/arctic-2025/\">ARCtic Conference day 1</a>, we had a second day packed full of inspiring Apple development talks.</p>\n<h2 id=\"highlights\" tabindex=\"-1\">Highlights <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<ol>\n<li><strong><a href=\"https://vision.rodeo/arctic-2025-day-2/#paul-hudson-ignite\">Paul Hudson</a> introduced Ignite</strong>, a new static site generator for Swift, allowing developers to build websites using Swift’s syntax and SwiftUI-like result builders.</li>\n<li><strong><a href=\"https://vision.rodeo/arctic-2025-day-2/#mikaela-caron-creating-games-with-tabletopkit-for-visionos\">Mikaela Caron</a> showcased TabletopKit</strong> for VisionOS, demonstrating how to create immersive tabletop games with RealityKit and SharePlay integration.</li>\n<li><strong><a href=\"https://vision.rodeo/arctic-2025-day-2/#daniel-steinberg-what-the-heck-happened-to-generics\">Daniel Steinberg</a> broke down <code>some</code> vs. <code>any</code> in Swift</strong>, explaining their impact on generics, type safety, and performance.</li>\n<li><strong><a href=\"https://vision.rodeo/arctic-2025-day-2/#priyal-porwal-building-maintainable-ios-apps-with-swift-macros\">Priyal Porwal</a> explored Swift Macros</strong>, showing how they reduce boilerplate and improve maintainability in iOS apps.</li>\n<li><strong><a href=\"https://vision.rodeo/arctic-2025-day-2/#hidde-van-der-ploeg-less-ai-more-magic\">Hidde van der Ploeg</a> emphasized “Less AI, more magic”</strong>, encouraging developers to focus on seamless user experiences rather than highlighting AI.</li>\n<li><strong><a href=\"https://vision.rodeo/arctic-2025-day-2/#pol-piella-abadia-tuning-your-app-using-xcode-s-instruments\">Pol Piella Abadia</a> demonstrated Xcode’s Instruments</strong>, providing insights into detecting performance bottlenecks, UI hangs, and memory leaks.</li>\n<li><strong><a href=\"https://vision.rodeo/arctic-2025-day-2/#aurelius-prochazka-10-years-of-magic-and-bliss-just-kidding\">Aurelius Prochazka</a> discussed the history of AudioKit</strong>, highlighting the benefits of creating community.</li>\n</ol>\n<p>If you missed it, you can find a write-up of the <a href=\"https://vision.rodeo/arctic-2025/\">talks from day one here</a>.</p>\n<h2 id=\"day-2-talks\" tabindex=\"-1\">Day 2 talks <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<p>As with day one, the conference took place in the beautiful <a href=\"https://teatteri-rio.wheree.com\">Teatteri Rio</a>. The following is my notes from each of the talks.</p>\n<h2 id=\"paul-hudson-ignite\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/paul\">Paul Hudson: Ignite</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<p>At the recent <a href=\"https://arcticonference.com\">ARCtic Conference</a>, Paul Hudson introduced <a href=\"https://github.com/twostraws/Ignite\">Ignite</a>, a new tool that allows Swift developers to build websites using Swift. This talk explored why this approach makes sense and how Ignite simplifies web development while leveraging Swift’s strengths.</p>\n<p>When building websites today, developers need to consider a range of factors:</p>\n<ul>\n<li>Browser compatibility</li>\n<li>Device compatibility</li>\n<li>Complex UI elements</li>\n<li>Accessibility</li>\n</ul>\n<p>For Swift developers, juggling both Swift and HTML can be a challenge. Hudson’s argument is that using Swift to build websites could streamline this process, making web development more familiar and accessible for Swift developers.</p>\n<p>One of the key innovations behind Ignite is its use of Swift’s <strong>Result Builders</strong> to define HTML structures. This approach allows developers to write HTML in a SwiftUI-like syntax. Just as swift handles views like this:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello world\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This can be directly mapped to HTML elements:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">h2 <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello world\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>By adopting SwiftUI’s declarative approach, developers can define web pages with clean, readable Swift code that is then rendered appropriately for the web.</p>\n<h3 id=\"ignite-a-static-site-generator-for-swift-developers\" tabindex=\"-1\">Ignite: A Static Site Generator for Swift Developers <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p><strong>Ignite</strong> is a static site generator designed specifically for Swift developers. It allows you to write websites in Swift and publish them easily, whether to GitHub Pages or other hosting services.</p>\n<ul>\n<li>Supports all standard HTML elements.</li>\n<li>Uses <a href=\"https://getbootstrap.com\">Bootstrap</a> for styling and accessibility.</li>\n<li>Includes pre-built components like accordions and navigation elements.</li>\n<li>Automatically generates metadata for SEO and social sharing.</li>\n<li>Responsive design that works across all device sizes.</li>\n<li>Requires no direct HTML knowledge.</li>\n<li>Provides command-line tools for running and building projects.</li>\n</ul>\n<p>This makes Ignite an appealing choice for developers who want a Swift-centric approach to building websites while ensuring modern compatibility and accessibility.</p>\n<h3 id=\"ignite-in-practice\" tabindex=\"-1\">Ignite in Practice <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Ignite is open source and actively maintained, boasting <strong>over 74 contributors</strong> and <strong>500+ unit tests</strong>. While it is focused on static site generation, developers looking for more dynamic functionality can integrate it with <strong><a href=\"https://docs.vapor.codes/leaf/overview/\">Vapor</a></strong> or <strong><a href=\"https://wpmudev.com/project/wp-hummingbird/\">Hummingbird</a></strong>.</p>\n<p>If you’re interested in seeing Ignite in action, check out the live examples available at <a href=\"https://ignitesamples.hackingwithswift.com/\">Ignite Samples</a>.</p>\n<p>During the talk, one interesting idea came to mind: <strong>Could Ignite be used as a template for app developers to create marketing websites for their apps?</strong></p>\n<p>A simple, ready-to-use <strong>Ignite template</strong> could include:</p>\n<ul>\n<li>A homepage with an introduction to the app</li>\n<li>Screenshots and feature highlights</li>\n<li>A direct link to the App Store</li>\n<li>A privacy policy page</li>\n<li>An optional developer blog for updates</li>\n</ul>\n<p>Since Ignite handles the complexities of web development, Swift developers could quickly spin up an app website without needing to learn HTML, CSS, or JavaScript.</p>\n<p>Find <a href=\"https://github.com/twostraws/Ignite\">Ignite on GitHub</a>.</p>\n<h2 id=\"mikaela-caron-creating-games-with-tabletopkit-for-visionos\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/mikaela\">Mikaela Caron: Creating games with TabletopKit for VisionOS</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<p><a href=\"https://arcticonference.com/speaker/mikaela\">TabletopKit</a> is a set of APIs designed for building tabletop games, working alongside RealityKit to render 3D elements. It provides a structured approach to game development by defining tables, seats, equipment, and interactions within a shared environment.</p>\n<h3 id=\"setting-up-a-game\" tabindex=\"-1\">Setting Up a Game <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Each game is centered around a <strong>table</strong>, which exists within a <strong>Volume</strong> and conforms to the <strong>Tabletop</strong> protocol. The table is identified using an <strong>Equipment</strong> identifier. Players occupy <strong>seats</strong>, which have specific poses relative to the table. These seats conform to the <strong>TableSeat</strong> protocol, defining their state and position.</p>\n<p>The primary steps to building an app with TabletopKit include:</p>\n<ul>\n<li>Configuring the game</li>\n<li>Implementing rules</li>\n<li>Adding effects with RealityKit</li>\n<li>Enabling SharePlay for multiplayer experiences</li>\n</ul>\n<h3 id=\"equipment-and-game-elements\" tabindex=\"-1\">Equipment and Game Elements <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Each piece of equipment requires a <strong>unique identifier</strong> (e.g., table, seats, game pieces). Equipment conforms to the <strong>Equipment</strong> protocol and has a <strong>BaseEquipmentState</strong> for configuration and rules. Items are added to the tabletop using <code>setup.add</code>.</p>\n<p>Additional considerations include:</p>\n<ul>\n<li><strong>EntityEquipment</strong> represents individual entities that exist separately from the core equipment.</li>\n<li><strong>Dice</strong> have a dedicated state called <strong>TossableRepresentation</strong>, which includes shape and initial state.</li>\n<li><strong>Tiles</strong> can be defined as <strong>Equipment</strong>, representing board spaces where tokens or other game pieces can be placed.</li>\n</ul>\n<h3 id=\"handling-interactions\" tabindex=\"-1\">Handling Interactions <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Interactions are managed through a structured update cycle:</p>\n<ul>\n<li>The <strong>Game</strong> object holds the overall setup.</li>\n<li>The <strong>TabletopInteraction</strong> delegate processes player interactions.</li>\n<li>The interaction cycle is updated and tracks active, canceled, or completed states.</li>\n<li>Interactions modify the game state based on predefined rules.</li>\n</ul>\n<p>Gestures define possible actions, such as:</p>\n<ul>\n<li>Specifying where a die can be thrown using <code>onGesturePhaseStarted</code>.</li>\n<li>Restricting token movement to valid board spaces.</li>\n<li>Using <code>onGesturePhaseEnd</code> to trigger actions like tossing equipment.</li>\n<li>Defining actions via <code>interaction.addAction</code> once interactions conclude.</li>\n</ul>\n<h3 id=\"observing-actions-and-game-state\" tabindex=\"-1\">Observing Actions and Game State <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>After setting up interactions, observers track game state changes and trigger responses, such as animations or state updates based on the type of equipment being used.</p>\n<h3 id=\"enabling-shareplay-for-multiplayer\" tabindex=\"-1\">Enabling SharePlay for Multiplayer <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>TabletopKit integrates with the <strong>GroupActivities API</strong> to support shared multiplayer sessions. This is managed through:</p>\n<ul>\n<li>Setting up a <strong>GroupActivityManager</strong> as an observable class.</li>\n<li>Using <code>coordinateWithSession</code> within each <code>Activity.session</code> to synchronize interactions across multiple players.</li>\n</ul>\n<p>This ensures that game states remain in sync, allowing for a seamless shared experience.</p>\n<h2 id=\"daniel-steinberg-what-the-heck-happened-to-generics\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/daniel\">Daniel Steinberg: What the heck happened to generics</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<h3 id=\"understanding-some-and-any-in-swift\" tabindex=\"-1\">Understanding <code>some</code> and <code>any</code> in Swift <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Swift provides <code>some</code> and <code>any</code> as ways to define opaque or existential types, but choosing the right one can impact performance and flexibility.</p>\n<h3 id=\"using-some-and-any\" tabindex=\"-1\">Using <code>some</code> and <code>any</code> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<ul>\n<li><code>some</code> indicates that while the exact type isn't specified, it remains consistent. This is useful in cases like <code>some View</code>, where the type is determined at compile time but remains opaque to the caller.</li>\n<li><code>any</code> is used for type erasure when working with protocol types, creating a runtime-checked box around a value rather than preserving its concrete type.</li>\n<li>When returning a <strong>random view</strong>, <code>some View</code> cannot be used because the compiler cannot determine the exact type. Instead, <code>any View</code> is required, but this comes with additional runtime overhead.</li>\n</ul>\n<h3 id=\"handling-identifiability-in-lists\" tabindex=\"-1\">Handling Identifiability in Lists <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<ul>\n<li>Lists require unique identifiers, but strings alone are not identifiable.</li>\n<li>One solution is to wrap a string in a struct that conforms to <strong>Identifiable</strong>, using a <strong>UUID</strong> as the identifier.</li>\n</ul>\n<h3 id=\"best-practices\" tabindex=\"-1\">Best Practices <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Swift encourages certain best practices to optimize performance and maintainability:</p>\n<ul>\n<li>Prefer <strong>let</strong> over <strong>var</strong> to ensure immutability where possible.</li>\n<li>Use <strong>structs</strong> instead of classes for value semantics.</li>\n<li>Prefer <code>some</code> over <code>any</code> where possible, as <code>some</code> is resolved at compile time and avoids the performance costs of type erasure.</li>\n</ul>\n<h3 id=\"parameter-packs-for-generic-views\" tabindex=\"-1\">Parameter Packs for Generic Views <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>To handle cases where a function needs to render multiple types of views generically, <strong>parameter packs</strong> can be used. These allow a flexible number of generic parameters without needing to specify them individually, improving type safety and reducing boilerplate. More details can be found in <a href=\"https://www.avanderlee.com/swift/value-and-type-parameter-packs/\">this guide</a>.</p>\n<h2 id=\"priyal-porwal-building-maintainable-ios-apps-with-swift-macros\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/priyal\">Priyal Porwal: Building maintainable iOS apps with Swift Macros</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<p>Swift macros, introduced in Swift 5.9, are used throughout Xcode to reduce repetitive code and improve performance by generating code at compile time. One common example is the <code>#Preview</code> macro for SwiftUI views. While macros do not support parameters, they help streamline development by eliminating boilerplate code.</p>\n<h3 id=\"types-of-macros\" tabindex=\"-1\">Types of Macros <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>There are two main types of macros:</p>\n<ul>\n<li><strong>Freestanding macros</strong> start with <code>#</code> and function independently within the code.</li>\n<li><strong>Attached macros</strong> are used as attributes and begin with <code>@</code>, such as <code>@Observable</code>.</li>\n</ul>\n<h3 id=\"creating-and-using-custom-macros\" tabindex=\"-1\">Creating and Using Custom Macros <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Developers can create custom macros in Xcode using the <code>swift-syntax</code> framework. Macros should be well-tested, ensuring that their output matches expected results, including formatting details like newlines. A basic example of a macro definition looks like this:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> macro <span class=\"token function\">myMacro</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Macros have specific roles that define how they transform code. More details on their implementation and best practices can be found <a href=\"https://swiftylion.com/articles/swift-macros\">in this article</a>.</p>\n<h3 id=\"challenges-and-considerations\" tabindex=\"-1\">Challenges and Considerations <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>While powerful, macros come with challenges. The syntax can be complex, and poorly optimized macros can increase build times. Proper testing is crucial, but unit tests for macros can be tricky due to strict formatting requirements. Macros offer significant benefits by simplifying code and improving maintainability.</p>\n<h2 id=\"hidde-van-der-ploeg-less-ai-more-magic\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/hidde\">Hidde van der Ploeg: Less AI, more magic</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<p>AI is everywhere. It's like when electricity replaced candles. Over time, appliances came about from better understanding of electricity. In a way, AI is similarly early.</p>\n<p>Using AI can help in marketing, but we can go further and turn it into magic.</p>\n<h3 id=\"magic-achieving-the-impossible\" tabindex=\"-1\">Magic = achieving the impossible <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>AI can help produce solutions that were not possible before. We don't need to call it out with sparkles icons. Such as when presenting a summary of data - the value is in the summary not in dressing it by advertising the implementation details.</p>\n<h3 id=\"approach-start-with-the-problem\" tabindex=\"-1\">Approach: Start with the problem <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>As in, don't start with &quot;how can we use AI to do <em>insert thing here</em>&quot;, instead ask &quot;how do we do <em>insert thing here</em>&quot; and if AI is an answer, maybe use it. In the end the customer doesn't care if the solution is created with AI as long as it works.</p>\n<p>AI presents a new or extended pallette of tools. From image generation, text summaries, translations and more.</p>\n<h3 id=\"abstract-away-the-complexity\" tabindex=\"-1\">Abstract away the complexity <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Instead of using an open text field, offer more specific options such as <code>translate</code> or <code>improve</code>. The chat box is only the beginning.</p>\n<h3 id=\"naming-features\" tabindex=\"-1\">Naming features <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>In the example above, <code>translate</code> could be <code>AI translation</code> but not useful information for the user looking for a solution.</p>\n<p>Sell the solution, not the technology.</p>\n<h2 id=\"pol-piella-abadia-tuning-your-app-using-xcode-s-instruments\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/pol\">Pol Piella Abadia: Tuning your app using Xcode's instruments</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<p>Instruments are powerful tools for analyzing performance across Apple platforms. They are integrated into Xcode and can be accessed from the standalone Instruments app, by pressing <code>Cmd + I</code> in Xcode, or navigating to <code>Product -&gt; Profile</code>. While incredibly useful, mastering them can take time.</p>\n<h3 id=\"working-with-the-main-thread\" tabindex=\"-1\">Working with the Main Thread <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>All UI updates must happen on the main thread. If a function runs on a background thread but modifies the UI, it can cause crashes or unexpected behavior.</p>\n<ul>\n<li>Swift 6 introduces stricter async rules: marking classes with <code>@MainActor</code> helps catch violations at compile time.</li>\n<li>If a function is causing crashes due to threading issues, wrap it with <code>await MainActor.run { ... }</code> to ensure execution on the main thread.</li>\n<li>Another option is to add <code>@MainActor</code> to the function itself, ensuring it always runs on the main thread.</li>\n</ul>\n<p>However, overusing <code>@MainActor</code> can lead to performance bottlenecks. If the main thread is too busy, it may cause UI delays or hangs:</p>\n<ul>\n<li>A <strong>micro-hang</strong> is a delay of ~250–500ms, noticeable but brief.</li>\n<li>A <strong>severe hang</strong> lasts 500ms or longer and significantly impacts user experience.</li>\n<li>Instruments allows hang detection, which can be enabled in debugging settings to show warnings on-screen.</li>\n</ul>\n<h3 id=\"memory-management-and-leaks\" tabindex=\"-1\">Memory Management &amp; Leaks <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>Memory leaks occur when allocated memory is not properly released, leading to increased memory usage over time. This is often due to strong references preventing objects from being deallocated.</p>\n<ul>\n<li>When a view that uses resources is removed, ensure those resources are also freed.</li>\n<li>Swift’s Automatic Reference Counting (ARC) handles most memory management automatically.</li>\n<li>Avoid retain cycles by using <code>weak</code> references where strong references are unnecessary.</li>\n</ul>\n<p>The <strong>Leaks</strong> instrument in Instruments helps identify memory leaks:</p>\n<ul>\n<li>A <strong>green checkmark</strong> indicates no issues.</li>\n<li>A <strong>red cross</strong> signals a detected memory leak.</li>\n<li>Investigate by checking for objects that reference each other in a circular way, and mark appropriate references as <code>weak</code>.</li>\n</ul>\n<h3 id=\"using-the-profiler\" tabindex=\"-1\">Using the Profiler <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<p>To diagnose performance issues, Instruments provides various profiling tools:</p>\n<ul>\n<li><strong>Time Profiler</strong> is useful for detecting UI hangs and sluggish performance.\n<ul>\n<li>Start by analyzing the main thread.</li>\n<li>Look at the <strong>heaviest stack trace</strong> to find the most time-consuming function calls.</li>\n<li>Enable <strong>Call Tree</strong> options to break down the execution flow and pinpoint problem areas.</li>\n</ul>\n</li>\n</ul>\n<p>For long-running tasks that slow down the main thread:</p>\n<ul>\n<li>Move intensive computations to <code>Task.detached { ... }</code> to execute them asynchronously.</li>\n<li>Instead of using <code>.onAppear</code>, consider replacing it with an <code>async</code> <code>task</code> to avoid blocking UI updates.</li>\n<li><code>async let ...</code> allows parallel execution of multiple async functions, reducing wait time for independent tasks.</li>\n<li>The <strong>Swift Tasks</strong> instrument in Instruments can help visualize when async tasks run and identify bottlenecks.</li>\n</ul>\n<h3 id=\"additional-tools-and-tips\" tabindex=\"-1\">Additional Tools &amp; Tips <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h3>\n<ul>\n<li><strong>Signposts</strong>: Use <a href=\"https://developer.apple.com/documentation/os/ossignposter\">OSSignpost</a> to insert markers in your code and measure performance at specific points.</li>\n<li><strong>View Body Instrument</strong>: This adds a timeline lane in Instruments, helping highlight slow SwiftUI rendering processes.</li>\n<li><strong>Building Between Runs</strong>: Always build (<code>Cmd + I</code>) before starting a new Instruments recording to ensure the latest version is analyzed.</li>\n</ul>\n<p>By integrating these tools into development workflows, performance issues can be identified and resolved efficiently, leading to smoother, more responsive apps.</p>\n<h2 id=\"aurelius-prochazka-10-years-of-magic-and-bliss-just-kidding\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/aure\">Aurelius Prochazka: 10 Years of Magic and Bliss (Just Kidding)</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025-day-2/\">#</a></h2>\n<p>The creator of AudioKit, Aurelius gave a wonderful talk that drew together all the others in delivering insights about how to be a positive member of the developer community.</p>\n<p>Shipping, improving, collaborating, and the benefits of putting out quality into the universe. A lovely end to the day!</p>\n",
			"date_published": "2025-03-13T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/arctic-2025/",
			"url": "https://vision.rodeo/arctic-2025/",
			"title": "ARCtic iOS conference 2025 - Day 1",
			"content_html": "<p>It's been a while since I posted, as I've been busy with web projects such as the new <a href=\"https://classy.cards\">Classy.cards</a> project. However this week I've been lucky enough to attend <a href=\"https://arcticonference.com\">ARCtic Conference</a> in Oulu, Finland.</p>\n<p>There was a lot of great content and the conference has already proved inspiring after just the first day. It covered coding practices, working with large teams, comments, designing for intent, and handling content.</p>\n<p>Here are some notes from the talks I've enjoyed so far.</p>\n<h2 id=\"highlights\" tabindex=\"-1\">Highlights <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<ul>\n<li><strong>Localized String Matching</strong>: Use <a href=\"https://developer.apple.com/documentation/foundation/nsstring/1416328-localizedstandardcontains\"><code>localizedStandardContains</code></a> for case-insensitive, diacritic-aware searches in Swift.</li>\n<li><strong>Apple's Translation Tooling</strong>: Handy for quick translations but requires manual verification for accuracy.</li>\n<li><strong>App Intents &amp; Action-Centered Design</strong>: Shift focus from app-centric to action-centric experiences, enabling seamless interactions across devices.</li>\n<li><strong>Code Comments That Matter</strong>: Write comments that explain the <em>why</em>, not just the <em>how</em>, and keep them relevant over time.</li>\n<li><strong>Scaling from Indie to Enterprise</strong>: Small teams offer flexibility, but scaling up requires strong alignment, documentation, and structured ownership.</li>\n<li><strong>AI in Apple’s Ecosystem</strong>: Apple’s AI approach prioritizes privacy and efficiency, but real-world limitations (e.g., Genmoji handling, translation quirks) require thoughtful implementation.</li>\n<li><strong>Video Games &amp; Accessibility</strong>: Lessons from gaming—clear visuals, sound alternatives, and adaptive interfaces—can improve app usability for everyone.</li>\n<li><strong>Content as Code</strong>: Treat content with the same rigor as software—version control, structured updates, and dedicated tooling for data management.</li>\n</ul>\n<h2 id=\"workshop-level-up-your-swift-and-swiftui-with-paul-hudson\" tabindex=\"-1\">Workshop: Level up your Swift and SwiftUI with Paul Hudson <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<p><a href=\"https://arcticonference.com/workshop/levelup/\">ARCtic Conference Workshop: Level Up</a></p>\n<p>I attended Paul Hudson's half-day workshop at the ARCtic Conference, a hands-on session focused on refining existing Swift code. The format encouraged discussion and collaboration, with attendees suggesting and implementing improvements to a working project.</p>\n<h3 id=\"string-matching-with-localizedstandardcontains\" tabindex=\"-1\">String Matching with <code>localizedStandardContains</code> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>One of the more useful discussions covered best practices for string matching in Swift. <a href=\"https://developer.apple.com/documentation/foundation/nsstring/1416328-localizedstandardcontains\"><code>localizedStandardContains</code></a> was recommended for case-insensitive, diacritic-insensitive, locale-aware searches. This method is particularly helpful for handling special characters from different languages, such as the German sharp S (<code>ß</code>). However, it can sometimes behave unpredictably with emoji and other special characters, so testing is essential.</p>\n<h3 id=\"translation-tooling-with-apple-intelligence\" tabindex=\"-1\">Translation Tooling with Apple Intelligence <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>We also covered Apple's built-in translation tooling and how it can streamline internationalization. While useful, it’s important to be aware of its limitations and verify translations for accuracy.</p>\n<h3 id=\"best-practices-for-clean-code\" tabindex=\"-1\">Best Practices for Clean Code <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>The session reinforced several best practices for writing cleaner Swift code:</p>\n<ul>\n<li><strong>Abstracting reusable code</strong>: Moving repeated logic into separate methods for better modularity.</li>\n<li><strong>Consistent variable naming</strong>: Keeping naming conventions uniform to improve readability.</li>\n<li><strong>Code organization</strong>: Structuring projects logically for easier maintenance and collaboration.</li>\n</ul>\n<p>The workshop provided was an interesting and practical opportunity to refine best practices and pick up new techniques.</p>\n<h2 id=\"day-1\" tabindex=\"-1\">Day 1 <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<p>The conference took place in the beautiful <a href=\"https://teatteri-rio.wheree.com\">Teatteri Rio</a>. The following is my notes from each of the talks.</p>\n<h2 id=\"ben-scheirman-from-independent-to-big-company-ios\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/ben\">Ben Scheirman: From independent to big company iOS</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<p>Ben’s talk explored the transition from small teams to larger company environments, touching on the challenges and trade-offs at different stages of a developer’s career. It was centered around iOS but could easily apply to developers in other fields.</p>\n<h3 id=\"small-companies-and-independent-work\" tabindex=\"-1\">Small Companies and Independent Work <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Working in small teams offers speed, flexibility, and control over technology choices. However, it also means smaller projects, budgets, and overall impact.</p>\n<p>For independent developers, the biggest challenges often go beyond coding—handling taxes, business management, and chasing down payments are part of the job. A useful rule of thumb: independent work should provide at least two of the following—great pay, great work, or great people. When setting up contracts, including a kill fee or buyout clause is a smart move.</p>\n<p>While independence brings freedom, it also comes with limited involvement after project handoff and fewer long-term opportunities.</p>\n<h3 id=\"large-companies-and-scaling-up\" tabindex=\"-1\">Large Companies and Scaling Up <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Larger companies function as a collection of interconnected teams, requiring strong alignment to stay on track. Finding the ‘north star’—a shared goal—is crucial to keeping teams moving in the same direction.</p>\n<p>At scale, abstraction matters more than implementation. Good software design allows components to plug into existing platforms without micromanaging details.</p>\n<h4 id=\"working-effectively-in-teams\" tabindex=\"-1\">Working Effectively in Teams <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h4>\n<p>Great teams produce great software. Key practices for fostering a strong team environment include:</p>\n<ul>\n<li><strong>Empathy and relationships</strong>: Building trust and offering growth opportunities.</li>\n<li><strong>Knowledge sharing</strong>: Setting up office hours or calendar slots for technical questions.</li>\n<li><strong>PR reviews with empathy</strong>: Being kind while maintaining standards, and using linting to automate minor checks.</li>\n<li><strong>Pair programming</strong>: Encouraging learning and collaboration.</li>\n<li><strong>Collective code ownership</strong>: Avoiding territorial behavior while ensuring accountability through a Directly Responsible Individual (DRI), such as a release captain.</li>\n</ul>\n<h4 id=\"handling-scale-and-stability\" tabindex=\"-1\">Handling Scale and Stability <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h4>\n<p>Planning for high demand is essential. A simple yet effective first step is leveraging HTTP caching.</p>\n<p>Crashes become significant at scale — a seemingly low 0.5% crash rate translates to thousands of failures across millions of sessions. Tracking and addressing crashes proactively is key.</p>\n<h4 id=\"writing-reliable-code\" tabindex=\"-1\">Writing Reliable Code <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h4>\n<ul>\n<li><strong>Prioritize compiler errors over test failures</strong>: Catching issues early reduces reliance on runtime checks.</li>\n<li><strong>Use strong types</strong>: Preventing errors at the type level reduces the need for manual vigilance.</li>\n<li><strong>Maintain test infrastructure</strong>: Provide useful example tests, build a support library, and keep components small with minimal dependencies.</li>\n<li><strong>Debugging tools</strong>: Implementing a debug menu to trigger tests and mock states can streamline development.</li>\n</ul>\n<h2 id=\"alaina-kafkes-long-live-the-code-comment\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/alaina\">Alaina Kafkes: Long live the code comment</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<p>Alaina Kafkes’ talk explored how to write effective code comments, addressing common pitfalls and best practices for clarity and maintainability.</p>\n<h3 id=\"common-issues-with-code-comments\" tabindex=\"-1\">Common Issues with Code Comments <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Poorly written comments can create more confusion than clarity. Some of the most common issues include:</p>\n<ul>\n<li><strong>Outdated</strong>: No longer accurate as the code evolves.</li>\n<li><strong>Inaccurate</strong>: Misleading or incorrect explanations.</li>\n<li><strong>Redundant</strong>: Simply restating what the code already makes obvious.</li>\n<li><strong>Overlong</strong>: Too much detail, making them difficult to read.</li>\n<li><strong>Incomplete</strong>: Missing critical context or purpose.</li>\n</ul>\n<h3 id=\"the-role-of-comments-in-code\" tabindex=\"-1\">The Role of Comments in Code <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Inspired by <em>A Philosophy of Software Design</em> by John Ousterhout, the talk emphasized that:</p>\n<ul>\n<li>Code <strong>shows how</strong> something works.</li>\n<li>Comments <strong>explain what</strong> the code does and <strong>why</strong> it’s written that way.</li>\n</ul>\n<h3 id=\"types-of-comments-and-their-uses\" tabindex=\"-1\">Types of Comments and Their Uses <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<ol>\n<li>\n<p><strong>Interface Comments</strong> (Most useful)</p>\n<ul>\n<li>Placed above functions, explaining purpose and expected behavior.</li>\n<li>Can be supplemented by well-named functions and clear APIs.</li>\n</ul>\n</li>\n<li>\n<p><strong>Implementation Comments</strong></p>\n<ul>\n<li>Found within functions, clarifying non-obvious logic.</li>\n</ul>\n</li>\n<li>\n<p><strong>Cross-Component Comments</strong></p>\n<ul>\n<li>Documentation such as READMEs to explain how different parts of a system interact.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"vidit-bhargava-action-centered-design\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/vidit\">Vidit Bhargava: Action centered design</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<p>Vidit Bhargava’s talk explored how app design is evolving beyond single platforms, focusing on actions rather than standalone applications.</p>\n<h3 id=\"the-shift-to-action-centered-design\" tabindex=\"-1\">The Shift to Action-Centered Design <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Modern apps function across multiple contexts—phones, watches, desktops, and notifications. Instead of designing for a single platform, developers should think of apps as a way to enable actions that adapt to different environments.</p>\n<h3 id=\"the-action-centered-approach\" tabindex=\"-1\">The Action-Centered Approach <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<ol>\n<li><strong>Action</strong> → Identify the core task the user wants to accomplish.</li>\n<li><strong>Information</strong> → Determine the essential data required for that action.</li>\n<li><strong>Interface</strong> → Surface the information through the simplest possible interface, from widgets to full-screen apps.</li>\n</ol>\n<h3 id=\"implementation-with-app-intents\" tabindex=\"-1\">Implementation with App Intents <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Apple’s App Intents framework helps structure this approach by:</p>\n<ul>\n<li><strong>Performing logic</strong> to handle user actions.</li>\n<li><strong>Defining inputs</strong> (AppEntities) that supply necessary information.</li>\n<li><strong>Providing results</strong> through various interface outputs.</li>\n</ul>\n<p>Action-centered design ensures that apps remain functional across different devices and contexts, making user interactions more seamless and efficient.</p>\n<p>More insights can be found at <a href=\"https://blog.viditb.com\">Vidit Bhargava’s blog</a>.</p>\n<h2 id=\"ellen-shapiro-an-ai-skeptic-implements-apple-intelligence\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/ellen\">Ellen Shapiro: An AI Skeptic Implements Apple Intelligence</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<p><a href=\"https://mastodon.social/@designatednerd\">mastodon.social/@designatednerd</a></p>\n<h3 id=\"issues-with-ai-and-llms\" tabindex=\"-1\">Issues with AI and LLMs <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Large language models (LLMs) have fundamental flaws, including their inability to distinguish truth from fiction. This raises concerns about their reliability, as seen in real-world issues like an AI agent purchasing overpriced groceries due to poor judgment.</p>\n<p>Some broader concerns with AI include:</p>\n<ul>\n<li><strong>Grand theft autocomplete</strong> – Many models are trained on data with unclear or questionable sourcing.</li>\n<li><strong>High energy consumption</strong> – AI systems require significantly more power than traditional computing.</li>\n<li><strong>Unpredictable errors</strong> – AI outputs can be inconsistent and difficult to anticipate.</li>\n<li><strong>Susceptibility to abuse</strong> – Bad actors can exploit AI hallucinations.</li>\n<li><strong>Erosion of critical thinking</strong> – Overreliance on AI may reduce users' ability to think critically.</li>\n</ul>\n<h3 id=\"apple-s-approach-to-ai\" tabindex=\"-1\">Apple’s Approach to AI <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Apple aims to address some of these concerns by focusing on on-device computation, making AI features more efficient and private. Their ML platforms offer structured ways to integrate AI while maintaining a user-first approach.</p>\n<h3 id=\"implementing-apple-intelligence\" tabindex=\"-1\">Implementing Apple Intelligence <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<p>Ellen provided examples of how Apple Intelligence can be integrated into apps. See the GitHub repository for sample implementations: <a href=\"https://github.com/designatednerd/AppleIntelligenceExamples\">Apple Intelligence Examples</a>.</p>\n<h4 id=\"notes\" tabindex=\"-1\">Notes: <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h4>\n<ul>\n<li><strong>Image Playgrounds</strong> – Only available on a real device (not in the simulator), with strict limitations and visual artifacts.</li>\n<li><strong>Genmoji</strong> – Managed as a folder requiring special handling for inline usage.</li>\n<li><strong>Writing Tools</strong> – Brings up a UI panel with customization options but has limitations (e.g., tables are not fully supported for copy/paste).</li>\n<li><strong>Translation API</strong> – Useful for machine-driven translations, potentially helpful in apps like an iOS recipe app.</li>\n</ul>\n<h3 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h3>\n<ul>\n<li>Be cautious of AI hype and its limitations.</li>\n<li>Apple Intelligence has restrictions that require real-device testing.</li>\n<li>Genmojis have tricky implementation details.</li>\n<li>TextKit 2 remains buggy and may not always be worth updating to.</li>\n</ul>\n<h2 id=\"chris-price-when-content-is-king\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/chris\">Chris Price: When Content is King</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<p>When building content-driven apps, structuring data efficiently is crucial:</p>\n<ul>\n<li>Choose a storage format that simplifies functionality (e.g., mapping SQLite to CoreData or using JSON for direct mapping to app structure).</li>\n<li>Develop tools for data entry, such as spreadsheets or helper apps, and document the process.</li>\n<li>Determine an update strategy—this could be time-based or aligned with Apple’s release cycle.</li>\n<li>Treat content with the same importance as code: version control it, ensure proper naming conventions, and implement a testing and bug-tracking system.</li>\n</ul>\n<h2 id=\"klemens-strasser-what-video-games-can-teach-us-about-accessibility\" tabindex=\"-1\"><a href=\"https://arcticonference.com/speaker/klemens\">Klemens Strasser: What Video Games Can Teach Us About Accessibility</a> <a class=\"header-anchor\" href=\"https://vision.rodeo/arctic-2025/\">#</a></h2>\n<p>Key accessibility considerations inspired by video game design:</p>\n<ul>\n<li><strong>Color Deficiency:</strong> Use accessible color palettes and symbols instead of relying solely on color (see <em>Effortless SwiftUI Theming</em>).</li>\n<li><strong>Custom Fonts:</strong> Support font adjustments, including accessible fonts like Lexend and OpenDyslexic.</li>\n<li><strong>Simplified Layouts:</strong> Offer streamlined interfaces using Assistive Access (<code>isAssistiveAccessEnabled</code> environment variable) to adapt content presentation.</li>\n<li><strong>Sound Design:</strong> Augment sound cues with haptic feedback (see <em>WWDC Explore Immersive Sound Design</em> and use the <em>Haptrix</em> tool for generating haptic feedback).</li>\n<li><strong>Spatial Accessibility:</strong> Ensure Vision Pro experiences are accessible.</li>\n<li><strong>Onboarding:</strong> Present accessibility options early, ideally with an overlay or an easily accessible settings button.</li>\n</ul>\n<p><strong>Resources:</strong></p>\n<ul>\n<li><a href=\"https://medium.com/@katramesh91/effortless-theming-in-swiftui-mastering-multiple-themes-and-best-practices-061113be6d3d\">Effortless Theming in SwiftUI</a></li>\n<li><a href=\"https://gameaccessibilityguidelines.com\">Game Accessibility Guidelines</a></li>\n<li><a href=\"https://www.applevis.com\">AppleVis Forum</a> – Community for discussing accessibility</li>\n<li><a href=\"https://ec.europa.eu/social/main.jsp?catId=1202\">European Accessibility Act</a></li>\n<li><a href=\"https://strasser.app\">Klemens Strasser’s Website</a></li>\n</ul>\n<p>That's all I have for day 1! I did miss a couple of talks as I was feeling quite run down by the afternoon. Hopefully I'll catch some more tomorrow. See you then!</p>\n",
			"date_published": "2025-03-12T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/window-3d-content/",
			"url": "https://vision.rodeo/window-3d-content/",
			"title": "Bringing 3D to window content",
			"content_html": "<p>We can add depth to windowed content in visionOS with 3D objects and 3D padding.</p>\n<p>In the post we will look at ways to use use <code>RealityView</code> to generate some 3D artwork, and position it alongside some buttons and inputs, using 3D positioning.</p>\n<h2 id=\"3d-theme-selector\" tabindex=\"-1\">3D theme selector <a class=\"header-anchor\" href=\"https://vision.rodeo/window-3d-content/\">#</a></h2>\n<p>When working on <a href=\"https://vision.rodeo/blockstack-testflight/\">BlockStack</a> I wanted to make a theme-selector screen that showed how the textures would look in 3D. The resulting screen looks like this:</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/6V45WJT\"><a href=\"https://imgur.com/a/6V45WJT\">BlockStack Theme Selector</a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<p>The view includes a pair of 3D objects generated in code to which I've applied textures. Then it uses a <code>Picker</code> UI element to change the selected texture. Let's build something similar.</p>\n<h2 id=\"example\" tabindex=\"-1\">Example <a class=\"header-anchor\" href=\"https://vision.rodeo/window-3d-content/\">#</a></h2>\n<p>Let's build a simplified version of the above to see how 3D positioning works:</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/lfYc0WM\"><a href=\"https://imgur.com/a/lfYc0WM\">A 3D window content view</a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<h3 id=\"adding-a-3d-object\" tabindex=\"-1\">Adding a 3D object <a class=\"header-anchor\" href=\"https://vision.rodeo/window-3d-content/\">#</a></h3>\n<p>To start we can set up some initial code that generates and displays different shapes based on a given <code>selectedShape</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> selectedShape <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"cube\"</span></span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> selectedShape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n                    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateEntity</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> selectedShape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n                    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateEntity</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n                    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateEntity</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> shape<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"cube\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> modelEntity <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> shape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span> <span class=\"token punctuation\">{</span>\n            modelEntity <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateSphere</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> shape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span> <span class=\"token punctuation\">{</span>\n            modelEntity <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateCone</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        modelEntity<span class=\"token punctuation\">.</span>model<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>materials <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> modelEntity\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We can generate a shape and show it in the content view. Let's add some UI. Adjust the above by adding a &quot;Done&quot; button and a <code>Picker</code> to select different shapes:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Done\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Perform relevant action for \"Done\"</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">tint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> selectedShape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// ... existing code</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\">Picker</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Piece texture\"</span></span><span class=\"token punctuation\">,</span> selection<span class=\"token punctuation\">:</span> $selectedShape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">ForEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"cube\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> shape <span class=\"token keyword\">in</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span><span class=\"token function\">uppercased</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tag</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>This adds some 2D content to our view, but the 3D shape is in the way!</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/hV7kw7f-uD-2337.avif 2337w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/hV7kw7f-uD-2337.webp 2337w\"><img alt=\"The UI is blocked by the 3D shape\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/hV7kw7f-uD-2337.png\" width=\"2337\" height=\"806\"></picture></p>\n<p>We could tweak the size of the 3D object to not block the button and Picker, but then when the picker opens it'll still be behind the object. Let's instead bring those 2D elements forward to make them easier to see and interact with.</p>\n<h3 id=\"adding-ui-depth\" tabindex=\"-1\">Adding UI depth <a class=\"header-anchor\" href=\"https://vision.rodeo/window-3d-content/\">#</a></h3>\n<p>We can use <a href=\"https://developer.apple.com/documentation/swiftui/view/padding3d\">padding3D</a> to bring the UI forward:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">Picker</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Piece texture\"</span></span><span class=\"token punctuation\">,</span> selection<span class=\"token punctuation\">:</span> $selectedShape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ForEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"cube\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> shape <span class=\"token keyword\">in</span>\n        <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span><span class=\"token function\">uppercased</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tag</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">padding3D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>back<span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Adding <code>padding3D</code> with a <code>back</code> value of <code>400</code> will bring it forward. Apply this to both the picker and the &quot;Done&quot; button makes them easier to see:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/X0YHKIKhCV-930.avif 930w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/X0YHKIKhCV-930.webp 930w\"><img alt=\"UI positioned in front\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/X0YHKIKhCV-930.png\" width=\"930\" height=\"958\"></picture></p>\n<h3 id=\"finished-code\" tabindex=\"-1\">Finished code <a class=\"header-anchor\" href=\"https://vision.rodeo/window-3d-content/\">#</a></h3>\n<p>Here's what we have for the complete demo:</p>\n<p><em>ContentView</em></p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> selectedShape <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"cube\"</span></span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Done\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Perform relevant action for \"Done\"</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">tint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">padding3D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>back<span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> selectedShape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n                    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateEntity</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> selectedShape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n                    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateEntity</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n                    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\">Picker</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Piece texture\"</span></span><span class=\"token punctuation\">,</span> selection<span class=\"token punctuation\">:</span> $selectedShape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">ForEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"cube\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> shape <span class=\"token keyword\">in</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span><span class=\"token function\">uppercased</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tag</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">padding3D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>back<span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateEntity</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> shape<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"cube\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> modelEntity <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> shape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"sphere\"</span></span> <span class=\"token punctuation\">{</span>\n            modelEntity <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateSphere</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> shape <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"cone\"</span></span> <span class=\"token punctuation\">{</span>\n            modelEntity <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateCone</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        modelEntity<span class=\"token punctuation\">.</span>model<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>materials <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> modelEntity\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p><em>App View</em></p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ExampleApp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">defaultSize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">420</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2024-08-31T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/blockstack-testflight/",
			"url": "https://vision.rodeo/blockstack-testflight/",
			"title": "BlockStack now on TestFlight",
			"content_html": "<p>Just a few weeks ago I <a href=\"https://vision.rodeo/vision-pro-week-one/\">picked up a Vision Pro</a> and I've been learning loads about what it means to develop in visionOS.</p>\n<p>My first project was to take this <a href=\"https://vision.rodeo/jenga-in-vision-os/\">basic Jenga demo</a> and try to make it something actually playable, even fun! Introducing BlockStack, <a href=\"https://testflight.apple.com/join/1e8wHwE9\">available now on TestFlight</a>.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/cLbhLN5\" data-context=\"false\"><a href=\"https://imgur.com/a/cLbhLN5\">Playing BlockStack on the beach!</a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<p><strong>BlockStack for Vision Pro!</strong> This single-player game is relaxing way to play virtual Jenga. Challenge yourself to get the high score. Customise your experience with beautiful themes. Have fun!</p>\n<h2 id=\"testflight-version-now-available\" tabindex=\"-1\">TestFlight version now available <a class=\"header-anchor\" href=\"https://vision.rodeo/blockstack-testflight/\">#</a></h2>\n<p>I've uploaded my first build of the game <a href=\"https://testflight.apple.com/join/1e8wHwE9\">to TestFlight</a>. To install, make sure you have the TestFlight app then select &quot;Start Testing&quot; on the linked page.</p>\n<p>As I'm using some of the newer APIs introduced in Xcode 16, this version of the app requires <a href=\"https://www.apple.com/visionos/visionos-2-preview/\">vision OS 2</a>. Apologies for anyone on version 1 currently.</p>\n<h2 id=\"update-the-app-is-now-live-on-the-store\" tabindex=\"-1\">Update: The app is now live on the store! <a class=\"header-anchor\" href=\"https://vision.rodeo/blockstack-testflight/\">#</a></h2>\n<p>Want to support my development? <a href=\"https://apps.apple.com/app/blockstack/id6670283686\">Pick up the game now for just $1.99</a>.</p>\n",
			"date_published": "2024-08-30T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/vision-pro-week-two/",
			"url": "https://vision.rodeo/vision-pro-week-two/",
			"title": "Vision Pro update - I can see clearly now",
			"content_html": "<p>My Zeiss lenses arrived! As a follow up from <a href=\"https://vision.rodeo/vision-pro-week-one/\">this post on the first week with Vision Pro</a>, this is an update on how I'm getting on with this amazing device.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/f91B2Bwq5U-1280.avif 1280w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/f91B2Bwq5U-1280.webp 1280w\"><img alt=\"Updating Vision Pro to visionOS 2 Beta 5\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/f91B2Bwq5U-1280.jpeg\" width=\"1280\" height=\"960\"></picture></p>\n<p>My initial post got <a href=\"https://www.reddit.com/r/VisionPro/comments/1ejs7gi/thoughts_on_a_week_with_vision_pro/\">many helpful comments</a>, mostly relating to comfort. This post will focus on how that's going.</p>\n<h2 id=\"wearing-it-wrong\" tabindex=\"-1\">Wearing it wrong <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-two/\">#</a></h2>\n<p>There were several comments suggesting that the dual loop was a better approach that the solo knit for comfort. I've been back and forth on this and I was surprised to find that for longer usage I find the solo easier to use.</p>\n<p>The dual loop put more strain on the top of my head and the back part needs to be adjusted a lot as it slipped upward. This felt like a constant distraction.</p>\n<p>With the solo knit I can more easily dial-in the comfort by:</p>\n<ul>\n<li>Moving it lower on the back of my head when the cheeks need a little less pressure</li>\n<li>Moving it up when the forehead needs less pressure</li>\n</ul>\n<p>In the end, the approach I found that really helped was to not tighten it so much. For me the best approach is to position the light seal such that it hangs on the forehead with a light contact on the cheeks and nose, and only dial the solo knit in to the point where I can just slightly feel it on the back of my head.</p>\n<p>It's loose enough that if the cheeks start to feel it, I can scrunch my face up in a grimace and nudge the forehead position back up without having to use my hands to adjust the position.</p>\n<p>With this I am finding I can use Vision Pro for multiple hours every day. While it's still not perfect, it's good enough that I often forget any concerns about comfort.</p>\n<h2 id=\"lenses-and-visual-clarity\" tabindex=\"-1\">Lenses and visual clarity <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-two/\">#</a></h2>\n<p>I spent the first week using Vision Pro without Zeiss corrective lenses (they had to be ordered separately). While I'm not someone who wears glasses all the time, I do have use them for a slight distance correction.</p>\n<p>I only really need to use my glasses when driving and I had even asked my optometrist if I'd need the adjustment for the Vision Pro's approximate <a href=\"https://discussions.apple.com/thread/255464091?sortBy=rank\">6 to 8-foot focal distance</a> and was told I would not need them.</p>\n<p>Still, during the in-store demo I was set up with some Zeiss inserts and I found on using the device at home that nothing was <em>quite</em> sharp enough. I was continually having to strain and blink to try to focus things just a little more, as they would be always a little fringed and blurry. This was particularly true of the virtual display which was just about usable.</p>\n<p>The end result was my eyes and brain were getting tired quickly when using the headset and I was even noticing my eyes struggling to focus for a time after using it.</p>\n<h3 id=\"zeiss-lenses-arrived\" tabindex=\"-1\">Zeiss lenses arrived <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-two/\">#</a></h3>\n<p>But then my lenses arrived. When I put them in and put on the headset it was immediately clear <em>(heh)</em> that everythig was improved. Windows and text was clearer and the virtual display from my M1 Macbook Air was clear enough to be usable.</p>\n<p>I opened Apple TV and put on the Experience Immersive video, and suddenly it felt just as impressive as the in-store demo.</p>\n<p>After several days with the lenses my eyes are no longer fatigued. I would say that even with mild distance correction needs, having the Zeiss lenses is worthwhile.</p>\n<h2 id=\"using-the-device-day-to-day\" tabindex=\"-1\">Using the device day to day <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-two/\">#</a></h2>\n<p>After the initial week, I'm still using Vision Pro for several hours each day. I have put in about 12 hours in following coding tutorials and working on a little game I'm building to learn visionOS development.</p>\n<p>I've also watched some amazing 4K movies. Having a personal cinema is one of the device's strongest use-cases and a great way to watch movies. It is quite intense though so I'm finding I often watch half a movie and need to pause and revisit it the next day. I may get used to this.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/C1XednCZGy-1280.avif 1280w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/C1XednCZGy-1280.webp 1280w\"><img alt=\"Get away from her!\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/C1XednCZGy-1280.jpeg\" width=\"1280\" height=\"720\"></picture></p>\n<p>This is an iMax-sized screen in a virtual cinema. I often set up a big screen floating in an environment too.</p>\n<h3 id=\"panoramas\" tabindex=\"-1\">Panoramas <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-two/\">#</a></h3>\n<p>I am finding I take a lot more panoramas these days and they look great in the device. While the spatial-ify option for making 2D photos into 3D photos is feeling like a bit of a gimmick, I am more often turning to the panoramas to remind me how it felt to be in places. They're not the highest resolution but they work well.</p>\n<h3 id=\"emotional-immersion\" tabindex=\"-1\">Emotional immersion <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-two/\">#</a></h3>\n<p>I've noticed that with the comfort and clarity improved, I'm can better enjoy the immersive videos. Watching a documentary about rhinos and a musical rehearsal had me feeling much more emotional than a 2D video. I was clapping along with Alicia Keys and the band, and even got a little choked up at the story of the orphaned rhino and zebra.</p>\n<p>It's a common complaint that we don't have enough of such content, but I'm sure once the market for it grows we'll see more and more.</p>\n<h2 id=\"week-2-conclusions\" tabindex=\"-1\">Week 2 conclusions <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-two/\">#</a></h2>\n<p>After two weeks using the Vision Pro multiple hours per day, it's definitely growing on me. I'm much more content now with the comfort and find myself looking forward to taking time to sit back and enjoy TV shows and movies in my own little world, and I'm excited to learn how to build apps in 3D.</p>\n<p>I've learned how to properly position the headset using the solo knit, and the arrival of Zeiss lenses made it much easier on the eyes.</p>\n<p>The headset is not perfect. It's still heavy, warm, and feels like looking at the world through binoculars, but I'm seeing past these imperfections to the value is delivers and enjoying it all the more.</p>\n",
			"date_published": "2024-08-10T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/vision-pro-week-one/",
			"url": "https://vision.rodeo/vision-pro-week-one/",
			"title": "Vision Pro week one - An emotional rollercoaster",
			"content_html": "<p>I've had a Vision Pro for almost a week and thought I'd share my initial thoughts on this unusual device.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/6VSz_ySMzP-5712.avif 5712w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/6VSz_ySMzP-5712.webp 5712w\"><img alt=\"A new Vision Pro with a controller for games\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/6VSz_ySMzP-5712.jpeg\" width=\"5712\" height=\"4284\"></picture></p>\n<h2 id=\"tldr\" tabindex=\"-1\">TLDR <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>My first impressions: It's amazing, slick, and a lot of fun to use. The hardware and OS are beautiful, from the visuals to the sound and doing even mundane tasks like checking email while listening to a podcast feels futuristic. The environments, immersive video and apps are awe-inspiring.</p>\n<p>At the same time, it's heavy, makes my face hurt, has a narrow field of vision, and includes a fiddly battery on a thick cable.</p>\n<p>The app ecosystem is lacking - admittedly I can't use all the apps as I have an Ireland-based iCloud account - with experiences that occasionally seem absolutely wonderful and often clunky and buggy.</p>\n<p>I've developed a pain in the back of my neck, my temples have a constant dull ache and the skin under my eyes seems a bit stretched.</p>\n<p>It's a contradiction of a device. A part of me dreads putting it back on (mostly my face). At the same time, I am excited to explore spatial computing some more.</p>\n<p>It's a rollercoaster emotionally - disappointment at the discomfort and limited field of view while in the next moment experiencing delight and awe at what this thing can do.</p>\n<p>I am lucky I get to spend time with this device and am intrigued to see where it's going.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/qX3o8Bucd9-5712.avif 5712w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/qX3o8Bucd9-5712.webp 5712w\"><img alt=\"Vision Pro packed up and ready to travel\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/qX3o8Bucd9-5712.jpeg\" width=\"5712\" height=\"4284\"></picture></p>\n<h2 id=\"step-1-apple-store-demo\" tabindex=\"-1\">Step 1: Apple store demo <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>I booked an appointment for a demo at the Belfast Apple Store at 10am on a Monday morning. The experience was wonderful - I was running a bit early but had some questions about the Zeiss ordering process so they quickly booked me in and had me upstairs talking to their representative straight away.</p>\n<p>The demo itself was relaxed. I could tell they had a script to follow, with a face scan (they recommended a 21W), setup process, explanation of controls, and making sure the dual band strap was properly fitted.</p>\n<p>The demo covered selecting apps, environments, watching some Apple TV shows in a cinema environment, and ended with an inspiring sizzle reel of upcoming immersive video. That last part had be laughing and gasping - I didn't care that I was in a busy Apple store - it just felt amazing. A great demo!</p>\n<p>I was already convinced before entering the store that I wanted to make a purchase, and the demo was to see if I would find any compelling reason <em>not</em> to get it, but it left me positive on the device and delighted to pull out the credit card.</p>\n<p>When at the store I got to speak to a few staff members including someone who may have been the manager, and there was a lot of interest in what I thought of the new shiny device. In partcular, I want to call out Steve who guided me through the demo and made it a lot of fun.</p>\n<p>During the demo other staff members wandered by to listen in. When I put the moon environment into dark mode, they were excited to hear that I could see the stars!</p>\n<p>All in all it was a great store experience and I'd recommend anyone with an interest in the headset to book a demo.</p>\n<h2 id=\"first-days-getting-used-to-it\" tabindex=\"-1\">First days - getting used to it <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>After bringing the Vision Pro home and doing an unboxing, I was quick to jump in and get set up with my Apple ID, and try out some apps.</p>\n<p>Since the device is new and still geographically limited, my Irish Apple ID wasn't able to access the app store, or log in to Apple TV. I set up a UK-based Apple ID to get around the store issue and could log in to that within the &quot;media and purchases&quot; settings. Not ideal, as it doesn't have Apple TV, Music or Arcade, but it's a start.</p>\n<p>On the first day I spend a lot of time hanging out in environments, opening and moving windows around, and playing with some interesting spatial playground apps. Since I don't have a lot of media I mostly poked around Youtube and played a couple of local video movie files through MoonPlayer.</p>\n<p>I was struck by how different it is to have any number of huge windows I can place around my environment. It's such a different experience it takes some getting used to and can be overwhelming. I did have a lot of fun though.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/vu4aspA\" data-context=\"false\"><a href=\"https://imgur.com/a/vu4aspA\"></a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<h2 id=\"discomfort\" tabindex=\"-1\">Discomfort <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>I quickly learned about what people meant when they said that the device was uncomfortable. I think there's a learning curve to the way the device sits on the face. For me, I quickly found that the headset would feel like it was pulling down on my cheeks.</p>\n<p>When I tried to shift the weight through changing the position of the strap on the back of my head, I found that the pressure on my forehead became a problem. After the first day I had a headache and strange pains in my cheeks.</p>\n<h3 id=\"revisiting-the-store\" tabindex=\"-1\">Revisiting the store <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h3>\n<p>By the end of the second day, I was finding the comfort enough of a challenge that I made an appointment with the Apple Store to try other light seals. The staff were great and I got to try 11W, 33W, 22W and 23W seals. In the end I felt it was better to go with the 23W over the original 21W.</p>\n<p>In-store it felt perfectly fine. This is something I saw many commentators mention but it's hard to know until you give this headset a bit of time.</p>\n<p>The comfort feels ok at first, but even with the new seal it becomes a bit much within about 30 minutes. I can adjust the straps to move the weight around between the cheeks and forehead but it seems for me at least it's just not possible to get it to feel entirely comfortable.</p>\n<p>Even when writing this, I started off feeling totally fine (and loving this giant text editor window), but 30 minutes in I'm finding I need to either keep adjusting it or take a break.</p>\n<h3 id=\"tips-for-better-comfort\" tabindex=\"-1\">Tips for better comfort <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h3>\n<p>I have since discovered that my issue was mainly caused by over-tightening the solo strap. I've since found that comfort can be improved by keeping the headset loose enough that the device is on the edge of slipping off my face. I then carefully adjust the strap's position on the back of my head so that it's splitting the pressure between forehead and cheeks.</p>\n<p>The tweaks can be very subtle but with a little practice I'm able to dial-in the position: if it's heavy on cheeks I move the strap slightly down and maybe tighten a little. If it's heavy on forehead, I move it up a little and loosen.</p>\n<p>Everyone's different but this seems to help. It even reduces the blurriness a little.</p>\n<h2 id=\"glare-and-blurriness\" tabindex=\"-1\">Glare and blurriness <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>Something that seems an issue is the lens flare / glare effect. I've certainly noticed it, and at times it can be distracting. It seems to be particularly noticeable when there is a strong light source to the side, which leaks through the light shield and causes rings to appear around the bottom and the overlapping parts of the two lenses.</p>\n<p>In some high-contrast scenes of movies I've seeen the other type of glare, which seems to me more like a kind of greasy blurriness around the center of the image. It's only sometimes an issue.</p>\n<p>The light seal makes a difference in the lens flare around the edges, while the contrast in the video being watched can create glare within the lens itself. The latter I think is something intrinsic to the hardware and impossible to eliminate.</p>\n<h2 id=\"foveated-rendering-and-screen-angle\" tabindex=\"-1\">Foveated rendering and screen angle <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>The angle of the screens to your eyes can easily cause blurriness. For me initially this caused most of the UI to have a slight shimmer or blurriness. When I adjusted by light seal to 23W, this became less of an issue.</p>\n<p>I still notice some blurriness around the edges of the visible area. If I look with my eyes toward text at the side of the screen, there's a noticeable flickery blur to it. Even text near the center is not always perfectly clear, and slight movements of my head can cause it to be more or less blurry.</p>\n<p>Once I receive my Zeiss lenses I'll revisit this.</p>\n<h2 id=\"using-a-laptop\" tabindex=\"-1\">Using a laptop <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>I'm writing this post while using my 13 inch M1 Macbook Air, using a native Vision Pro writing app called Runestone.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/SmqUDSuS9m-1920.avif 1920w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/SmqUDSuS9m-1920.webp 1920w\"><img alt=\"Writing in Runestone while on a virtual beach\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/SmqUDSuS9m-1920.png\" width=\"1920\" height=\"1080\"></picture></p>\n<p>Typing is mostly great and I love how I can use the trackpad to select and move a cursor around. Sometimes the selection jumps around which results in text appearing out of place. I think this could be due to latency in the connection between the laptop and the virtual screen.</p>\n<h3 id=\"virtual-screen\" tabindex=\"-1\">Virtual screen <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h3>\n<p>It's fun being able to have a larger screen displaying the Macbook's contents. It's not as clear as I'd like. I sometimes found the interactions a little janky with the Vision Pro's taps taking focus away. Sometimes the connection to the laptop would drop. However I'm sure that's my old WIFI setup.</p>\n<h2 id=\"environments-and-productivity\" tabindex=\"-1\">Environments and productivity <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>As pictured above, I am enjoying be able to dial in an environment, and focus on one task at a time. In this case having a huge (tall!) editor for the text while feeling like I'm sitting on the beach. The environments come with sound. I'm listening to waves gently hitting the shore.</p>\n<p>It's pleasant and I'm noticing I quickly forget about the narrow field of view when in immersive environments. They also look a lot clearer than the pass-through video.</p>\n<h2 id=\"passthrough-video\" tabindex=\"-1\">Passthrough video <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>The passthrough video is pretty decent. It definitely looks a little grainy but it's clear enough for me to see the keys on my laptop keyboard or in a pinch, read authentication codes on my phone. It's not perfect but does a good enough job of letting me feel present in the room while having giant floating windows everywhere.</p>\n<h2 id=\"immersive-video\" tabindex=\"-1\">Immersive video <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>Beyond floating windows, I've tried a small amount of immersive video. The site <a href=\"https://www.explorepov.com\">Explore POV</a> looks like a great way to virtually travel, and Apple's own sizzle reel in Apple TV gives some indication of what it is capable of.</p>\n<p>My iCloud account being a temporary one means I've not signed up for Apple TV or other services but I will look forward to seeing more of this content in future.</p>\n<p>In the meantime I'm enjoying watching movies and TV shows in <a href=\"https://moonvrplayer.com\">Moon Player</a>. It offers a neat cinema immersive environment which feels like a fancy home cinema setup.</p>\n<p>Having said that, there seem to be other players such as <a href=\"https://apps.apple.com/ie/app/cineultra-immersive-cinema/id6478853637\">Cinemax</a> and others - none of which seem great yet to be honest but it's something to pay attention to.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/fqQmOWJ1bI-1920.avif 1920w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/fqQmOWJ1bI-1920.webp 1920w\"><img alt=\"Watching some Star Trek\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/fqQmOWJ1bI-1920.png\" width=\"1920\" height=\"1080\"></picture></p>\n<h2 id=\"photos-and-panoramas\" tabindex=\"-1\">Photos and panoramas <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>I was surprised how enjoyable it has been to browse photos and videos in the Photos app. I have a large collection of panoramas I've created since before the iPhone started offering the feature, and they are a great experience. The low resolution compared to immersive video is noticeable but it still feels great to be inside a panorama.</p>\n<h2 id=\"apps-ipad-apps-and-native\" tabindex=\"-1\">Apps: iPad apps and native <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>The few native iPad apps I've tried seem to work well. This includes calendar, notes and books. Sitting back and reading a book is an interesting experience. I've not had time to try reading properly but it could be a good way to experience books if the headset is comfortable enough.</p>\n<h2 id=\"visionos-2\" tabindex=\"-1\">visionOS 2 <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>The latest version of visionOS is available as a developer beta currently. I'm running the beta and it is a worthwhile update.</p>\n<p>One of the biggest benefits is the gesture for opening the home screen, which when combined with a twist of the wrist shows a summary of time, battery, focus states and volume level. A tap opens the control panel, and a press and drag opens a volume slider. It's a genuinely delightful little detail.</p>\n<p>Along with this the updates bring spatial photo processing. Existing photos can be made 3D using machine learning and the effect is stunning. I'm looking forward to exploring the spatial photo processing more as the emotional response to seeing older photos brought to life with this technology is fascinating.</p>\n<p>Videos can also be opened into standalone floating players more easily, and even set to display at maximum size in environments. Watching a Youtube video over lake Hood with the screen reflecting in the lake is a lot of fun.</p>\n<h2 id=\"visionos-details\" tabindex=\"-1\">visionOS details <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>Beyond the big things, I'm enjoying the small details throughout visionOS. The glass effect used for windows is beautiful. Windows stay where they are put, and it feels strange that other people around me can't see them when they seem to real.</p>\n<p>The sounds the UI triggers are nicely designed and add to the experience nicely. When the home screen shows there's a gentle and pleasant droning chord that plays subtly in the background. Combined with the visual details, the device feels futuristic and welcoming.</p>\n<h2 id=\"week-one-conclusions\" tabindex=\"-1\">Week one conclusions <a class=\"header-anchor\" href=\"https://vision.rodeo/vision-pro-week-one/\">#</a></h2>\n<p>It's been a distracting and busy week getting used to how this device feels and spending a lot of time poking around in various apps. While the app store is light on big apps, I can feel the potential in where this could go.</p>\n<p>The Apple Vision Pro is a fun and impressive headset. It can wow with its high resolution screens and immersive content, and is a superb way to enjoy TV and movies. It's been fun even using it for mundane tasks like working through the week's emails, browsing reviews of products in Youtube or just reading the news.</p>\n<p>I opened my Macbook Air to do some admin last night, and was shocked at how small everything was. I think the large UI of the Vision Pro, where every window is at least several feet across, quickly became normal and shaped my expectations of what size everything should be.</p>\n<p>Getting things done in the Vision Pro is both amazing and tiresome. Dealing with the cable and discomfort is distracting enough that it took me 2 hours to watch a 45-minute episode of a TV show. I hope I get used to these things otherwise they'll end up pushing me away from wanting to pick it up.</p>\n<p>I have not had time to open Xcode and try out any development myself, but I look forward to once the initial excitement settles a little.</p>\n<p>All in all it's been interesting. The Vision Pro is heavy and uncomfortable and yet I find myself thinking about it all the time and looking forward to getting back into it.</p>\n<p>Let's see how the next weeks or months go.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/QVAwbqERH1-1920.avif 1920w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/QVAwbqERH1-1920.webp 1920w\"><img alt=\"To boldly go where not many Irish people have gone yet this year\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/QVAwbqERH1-1920.png\" width=\"1920\" height=\"1080\"></picture></p>\n",
			"date_published": "2024-08-04T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/dismiss-immersive/",
			"url": "https://vision.rodeo/dismiss-immersive/",
			"title": "Dismissing immersive views",
			"content_html": "<p>When running an app that uses an immersive view, such as <a href=\"https://vision.rodeo/jenga-in-vision-os/\">this Jenga demo</a>, you might want the immersive scene to disappear when the window is closed. We can do this using the <code>scenePhase</code> environmental setting along with <code>dismissImmersiveSpace</code>.</p>\n<p>For example, we can use the <code>scenePhase</code> value of the main content view to determine if it's been closed, and use that to hide the immersive view:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> showImmersiveSpace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token omit keyword\">_</span><span class=\"token punctuation\">,</span> newValue <span class=\"token keyword\">in</span>\n    <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> newValue <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> <span class=\"token function\">showImmersiveView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> immersiveSpaceIsShown <span class=\"token punctuation\">{</span>\n            immersiveSpaceIsShown <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n            <span class=\"token keyword\">await</span> <span class=\"token function\">dismissImmersiveSpace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> scenePhase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> scenePhase <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>inactive<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">:</span>\n        immersiveSpaceIsShown <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        showImmersiveSpace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This <code>onChange</code> block will show the <code>ImmersiveView</code> if the <code>newValue</code> is <code>true</code> otherwise if the <code>ImmersiveView</code> is currently shown, it'll dismiss it.</p>\n<p>Then the <code>scenePhase</code> task applies a switch to <code>scenePhase</code> that will update the <code>showImmersiveSpace</code> value to <code>false</code> when the window is closed or goes into the background. This would then result in the immersive view being dismissed.</p>\n<h2 id=\"tracking-on-the-immersiveview\" tabindex=\"-1\">Tracking on the ImmersiveView <a class=\"header-anchor\" href=\"https://vision.rodeo/dismiss-immersive/\">#</a></h2>\n<p>We can also keep track of whether the immersive view is showing by using <code>scenePhase</code> but applied to the <code>RealityView</code> in <code>ImmersiveView</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> scenePhase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> scenePhase <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>inactive<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">:</span>\n        isShowingImmersive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">:</span>\n        isShowingImmersive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Here a <code>Binding</code> of <code>isShowingImmersive</code> can be toggled and the system can be aware that the <code>ImmersiveView</code> has been dismissed.</p>\n",
			"date_published": "2024-07-15T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/reset-physics/",
			"url": "https://vision.rodeo/reset-physics/",
			"title": "Reset physics in entities",
			"content_html": "<p>When <a href=\"https://vision.rodeo/jenga-in-vision-os/\">building a Jenga game</a>, I wanted to be able to reset the pieces. I was able to write a simple <code>reset</code> method that put the pieces back to where they should be but there was an unexpected result. Each time I press <code>Reset</code>, the pieces fall over:</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/RZIVyh3\" data-context=\"false\"><a href=\"https://imgur.com/a/RZIVyh3\">Jenga game without physics reset code</a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<h2 id=\"object-physics\" tabindex=\"-1\">Object physics <a class=\"header-anchor\" href=\"https://vision.rodeo/reset-physics/\">#</a></h2>\n<p>The video above shows that the pieces are being reset into their positions, but they still have their movement physics in place. As a result when reset, they continue to move causing the tower to collapse.</p>\n<h2 id=\"reset-the-physics\" tabindex=\"-1\">Reset the physics <a class=\"header-anchor\" href=\"https://vision.rodeo/reset-physics/\">#</a></h2>\n<p>We can apply to lines of code to reset the physics. First we set the piece to static, then call <a href=\"https://developer.apple.com/documentation/realitykit/modelentity/clearforcesandtorques()\">clearForcesAndTorques</a>.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">modelEntity<span class=\"token punctuation\">.</span>physicsBody<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span>\nmodelEntity<span class=\"token punctuation\">.</span><span class=\"token function\">clearForcesAndTorques</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>We then need to run a loop over the pieces to re-enable the physics:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> tower<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> modelEntity <span class=\"token operator\">=</span> child <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n        modelEntity<span class=\"token punctuation\">.</span>physicsBody<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">dynamic</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>As a result we should now be able to set the pieces and they should stay still:</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/DQwj1qo\" data-context=\"false\"><a href=\"https://imgur.com/a/DQwj1qo\">Jenga game with physics reset code</a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n",
			"date_published": "2024-07-08T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/playing-sounds/",
			"url": "https://vision.rodeo/playing-sounds/",
			"title": "Playing sounds",
			"content_html": "<p>With a Jenga game capable of <a href=\"https://vision.rodeo/detecting-collisions/\">detecting collisions</a>, we can experiment with adding sounds to collision events.</p>\n<h2 id=\"prepare-an-audio-file\" tabindex=\"-1\">Prepare an audio file <a class=\"header-anchor\" href=\"https://vision.rodeo/playing-sounds/\">#</a></h2>\n<p>To prepare a sound for this test, I grabbed a <a href=\"https://pixabay.com/sound-effects/search/jenga%20piece/\">free file from Pixabay</a> and used Audacity to export it as WAV, then an online converter to create a <code>caf</code> file. This can be added to the project and accessed when needed.</p>\n<p><a href=\"https://files.vision.rodeo/sounds/tap01.caf\">Download the audio file here</a>.</p>\n<h2 id=\"audiofileresource-extension\" tabindex=\"-1\">AudioFileResource extension <a class=\"header-anchor\" href=\"https://vision.rodeo/playing-sounds/\">#</a></h2>\n<p>In order to load the file, we need to set up an extension to <code>AudioFileResource</code>. This will allow us to load the necessary audio files in our views. Add this as a standalone file such as <code>AudioFileResource-loadBundleFile</code>.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">AudioFileResource</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadBundleFile</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> filename<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">AudioFileResource</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> audio <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">AudioFileResource</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            audio\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Unable to local audio file resource: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">filename</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> from bundle.\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"set-up-spatial-audio-on-entity\" tabindex=\"-1\">Set up Spatial Audio on entity <a class=\"header-anchor\" href=\"https://vision.rodeo/playing-sounds/\">#</a></h2>\n<p>When setting up the <code>piece</code> entity in the view model, we can set the entity to use Spatial audio:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">piece<span class=\"token punctuation\">.</span>spatialAudio <span class=\"token operator\">=</span> <span class=\"token class-name\">SpatialAudioComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>The <a href=\"https://developer.apple.com/documentation/realitykit/spatialaudiocomponent\">SpatialAudioComponent</a> method can be configured with <code>directivity</code> (the radiated pattern of sound), <code>gain</code> (the overall volume) and more.</p>\n<p>We can also set orientation on the sound to work in combination with <code>directivity</code> using <code>piece.orienation</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">audioSource<span class=\"token punctuation\">.</span>orientation <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>pi<span class=\"token punctuation\">,</span> axis<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>These can be set directly also such as when a collision event occurs and we might want to specify a value calculated in some way.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">entity<span class=\"token punctuation\">.</span>spatialAudio<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>directivity <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">beam</span><span class=\"token punctuation\">(</span>focus<span class=\"token punctuation\">:</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"loading-sound\" tabindex=\"-1\">Loading sound <a class=\"header-anchor\" href=\"https://vision.rodeo/playing-sounds/\">#</a></h2>\n<p>In the <code>ImmersiveView</code>, add a line above the body that uses this <code>loadBundleFile</code> method to load the sound:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> collisionAudio <span class=\"token operator\">=</span> <span class=\"token class-name\">AudioFileResource</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadBundleFile</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"tap01.caf\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"play-audio-from-an-entity\" tabindex=\"-1\">Play audio from an entity <a class=\"header-anchor\" href=\"https://vision.rodeo/playing-sounds/\">#</a></h2>\n<p>We can have the entity play this sound. As the Vision Pro makes use of spatial audio, the sound will sound like it's coming from the entity that plays it.</p>\n<p>We can have the entity involved in a collision play the sound when a collision event occurs:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">subscription <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CollisionEvents</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Began</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> floor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> collisionEvent <span class=\"token keyword\">in</span>\n    collisionEvent<span class=\"token punctuation\">.</span>entityB<span class=\"token punctuation\">.</span><span class=\"token function\">playAudio</span><span class=\"token punctuation\">(</span>collisionAudio<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The important detail here is that we can have <code>entity.playAudio(audioFile)</code> play the sound where needed.</p>\n",
			"date_published": "2024-06-30T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/detecting-collisions/",
			"url": "https://vision.rodeo/detecting-collisions/",
			"title": "Detecting collisions in visionOS",
			"content_html": "<p>Looking at ways to extend <a href=\"https://vision.rodeo/jenga-in-vision-os/\">the Jenga game we built earlier</a>, we need to know when the pieces collide with the table. We can use that to then play sounds or even add game logic. First though we need to detect collisions.</p>\n<p>I found <a href=\"https://lickability.com/blog/detecting-collisions-with-realitykit-in-visionos/\">this guide to detecting collisions on Lickability</a>, which explains nicely how to detect collisions between our game pieces and the table or floor.</p>\n<p>We can extend the Jenga example to add collision detection events.</p>\n<h2 id=\"adding-collision-events\" tabindex=\"-1\">Adding collision events <a class=\"header-anchor\" href=\"https://vision.rodeo/detecting-collisions/\">#</a></h2>\n<p>There are two parts to adding collision detection events. First we need to set up a variable to store event subscriptions. In <code>ImmersiveView</code>, add a private <code>@State</code> variable:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> subscription<span class=\"token punctuation\">:</span> <span class=\"token class-name\">EventSubscription</span><span class=\"token operator\">?</span></code></pre>\n<p>Then in the <code>RealityKit</code> view we can subscribe to an event which will trigger any time something collides with the floor:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">subscription <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CollisionEvents</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Began</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> floor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> collisionEvent <span class=\"token keyword\">in</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"💥 Collision between </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">collisionEvent<span class=\"token punctuation\">.</span>entityA<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> and </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">collisionEvent<span class=\"token punctuation\">.</span>entityB<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Running this, any time a piece falls off the table onto the floor we should see a print statement.</p>\n<h3 id=\"colliding-with-table\" tabindex=\"-1\">Colliding with table <a class=\"header-anchor\" href=\"https://vision.rodeo/detecting-collisions/\">#</a></h3>\n<p>I wasn't able to work out how to enable this for the table we build in Reality Composer Pro. Instead, I created a method similar to <code>generateFloor</code>.</p>\n<p>Since we added methods to <a href=\"https://vision.rodeo/loading-material-from-scene/\">load materials from a Reality Kit Content scene</a>, we can make use of these to load the table material and apply it to an entity created in code. Add the following to the <code>SharedViewModel</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> material<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RealityKit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Material</span> <span class=\"token operator\">=</span> <span class=\"token function\">loadMaterial</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Scene\"</span></span><span class=\"token punctuation\">,</span> named<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"table\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token class-name\">UnlitMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> tableShape<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MeshResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> cornerRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> table <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> tableShape<span class=\"token punctuation\">,</span>\n        materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>material<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    table<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    table<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n        mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> table\n<span class=\"token punctuation\">}</span></code></pre>\n<p>I made the table using a box primative, and added a <code>cornerRadius</code> to make it smoother. It's set to generate collision shapes, and physics and behave similarly to the floor.</p>\n<p>Back in <code>ImmersiveView</code> we can use this to generate and display a table:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> table <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">generateTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntable<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"table\"</span></span>\ntable<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>startingPositionX <span class=\"token operator\">+</span> viewModel<span class=\"token punctuation\">.</span>pieceWidth\ntable<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>startingPositionY\ntable<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>startingPositionZ <span class=\"token operator\">-</span> viewModel<span class=\"token punctuation\">.</span>pieceWidth</code></pre>\n<p>We then can add code to subscribe to the <code>table</code> collisions:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">subscription <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CollisionEvents</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Began</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> collisionEvent <span class=\"token keyword\">in</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"💥 Collision between </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">collisionEvent<span class=\"token punctuation\">.</span>entityA<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> and </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">collisionEvent<span class=\"token punctuation\">.</span>entityB<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We should now have a table generated in code that prints when collisions are detected:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/tYfnx-yWjS-2732.avif 2732w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/tYfnx-yWjS-2732.webp 2732w\"><img alt=\"A table generated in code with a material loaded from Reality Composr Pro\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/tYfnx-yWjS-2732.png\" width=\"2732\" height=\"2048\"></picture></p>\n",
			"date_published": "2024-06-30T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/loading-material-from-scene/",
			"url": "https://vision.rodeo/loading-material-from-scene/",
			"title": "Loading material from Reality Composer Pro scene",
			"content_html": "<p>In <a href=\"https://vision.rodeo/jenga-in-vision-os\">this Jenga demo</a> we have some orange coloured bricks. I thought it would be good to try to apply a material from one of the predefined examples in Reality Composer Pro.</p>\n<h2 id=\"set-up-texture-entity\" tabindex=\"-1\">Set up texture entity <a class=\"header-anchor\" href=\"https://vision.rodeo/loading-material-from-scene/\">#</a></h2>\n<p>To begin we set up a primative (I chose a sphere) in Reality Composer Pro and add the <code>MaplePlywood</code> texture from the content library. Apply this texture, and name the sphere <code>PieceTexture</code>.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/NzxaVTi1rh-3350.avif 3350w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/NzxaVTi1rh-3350.webp 3350w\"><img alt=\"The PieceTexture object in Reality Composer Pro\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/NzxaVTi1rh-3350.png\" width=\"3350\" height=\"1358\"></picture></p>\n<p>Since we don't want this object to be visible or interact with anything, we won't add any <code>connectors</code> like collisions or physics. Instead we can add the <code>Opacity</code> connector, and set the opacity to 0%.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/BgJTnFfhxr-738.avif 738w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/BgJTnFfhxr-738.webp 738w\"><img alt=\"Setting opacity to zero\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/BgJTnFfhxr-738.png\" width=\"738\" height=\"470\"></picture></p>\n<p>With that in place we now have an object in the scene from which we can load the texture in code.</p>\n<h2 id=\"load-material-in-code\" tabindex=\"-1\">Load material in code <a class=\"header-anchor\" href=\"https://vision.rodeo/loading-material-from-scene/\">#</a></h2>\n<p>Before we load the texture, we can set up the following in the <code>SharedViewModel</code>. Add a new <code>pieceMaterial</code> variable, and then load the material using <code>loadPieceMaterial</code> inside the <code>init</code> method.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> pieceMaterial<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RealityKit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Material</span><span class=\"token operator\">?</span>\n\n<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pieceMaterial <span class=\"token operator\">=</span> <span class=\"token function\">loadPieceMaterial</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Scene\"</span></span><span class=\"token punctuation\">,</span> named<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"PieceTexture\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">generateTower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>With this we can put together some code to drive this <code>loadPieceMaterial</code> method.</p>\n<h2 id=\"obtaining-the-material\" tabindex=\"-1\">Obtaining the material <a class=\"header-anchor\" href=\"https://vision.rodeo/loading-material-from-scene/\">#</a></h2>\n<p>To obtain the material we want we need to set up a couple of helpful functions. First we need to find the entity.</p>\n<h3 id=\"find-the-entity\" tabindex=\"-1\">Find the entity <a class=\"header-anchor\" href=\"https://vision.rodeo/loading-material-from-scene/\">#</a></h3>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token comment\">// Recursive function to search the entity and children for the named entity</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">findEntity</span><span class=\"token punctuation\">(</span>named name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> entity<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Entity</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> entity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> name <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> entity\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> entity<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> foundEntity <span class=\"token operator\">=</span> <span class=\"token function\">findEntity</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> foundEntity\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This function when called will check entities and their children and then return the matching entity if found.</p>\n<h3 id=\"find-the-material\" tabindex=\"-1\">Find the material <a class=\"header-anchor\" href=\"https://vision.rodeo/loading-material-from-scene/\">#</a></h3>\n<p>With the entity found, we check in a similar way to see if it is a component and return the first material, or else check the children and repeat.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token comment\">// Finds a material from an entity (or its children)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">findMaterial</span><span class=\"token punctuation\">(</span>from entity<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">RealityKit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Material</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> modelComponent <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">ModelComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> modelComponent<span class=\"token punctuation\">.</span>materials<span class=\"token punctuation\">.</span>first\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> entity<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> material <span class=\"token operator\">=</span> <span class=\"token function\">findMaterial</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> material\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"putting-the-functions-together\" tabindex=\"-1\">Putting the functions together <a class=\"header-anchor\" href=\"https://vision.rodeo/loading-material-from-scene/\">#</a></h3>\n<p>Next we put these functions together to search for the entity, then the material, and return it.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadPieceMaterial</span><span class=\"token punctuation\">(</span>from sceneName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> named materialName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">RealityKit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Material</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> sceneName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> realityKitContentBundle<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Error: Unable to load the scene.\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> materialEntity <span class=\"token operator\">=</span> <span class=\"token function\">findEntity</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> materialName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">let</span> material <span class=\"token operator\">=</span> <span class=\"token function\">findMaterial</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> materialEntity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> material\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Error: Unable to find entity or its material in the scene.\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"applying-texture-to-the-brick-pieces\" tabindex=\"-1\">Applying texture to the brick pieces <a class=\"header-anchor\" href=\"https://vision.rodeo/loading-material-from-scene/\">#</a></h3>\n<p>Lastly we want to update the code that applies the texture. In the <code>generatePiece</code> method amend the code that generates the piece to:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> piece<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ModelEntity</span>\n<span class=\"token keyword\">let</span> boxShape<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MeshResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> pieceWidth<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> pieceHeight<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> pieceDepth<span class=\"token punctuation\">,</span> cornerRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.005</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> material <span class=\"token operator\">=</span> pieceMaterial <span class=\"token punctuation\">{</span>\n    piece <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> boxShape<span class=\"token punctuation\">,</span>\n        materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>material<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> defaultMaterial <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicallyBasedMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    defaultMaterial<span class=\"token punctuation\">.</span>baseColor<span class=\"token punctuation\">.</span>tint <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>orange\n    defaultMaterial<span class=\"token punctuation\">.</span>roughness <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicallyBasedMaterial</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Roughness</span><span class=\"token punctuation\">(</span>floatLiteral<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    piece <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> boxShape<span class=\"token punctuation\">,</span>\n        materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>defaultMaterial<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This will conditionally apply the material if loaded.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/ZZqk06Gd_p-2732.avif 2732w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/ZZqk06Gd_p-2732.webp 2732w\"><img alt=\"Textured blocks featuring a wooden material\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/ZZqk06Gd_p-2732.png\" width=\"2732\" height=\"2048\"></picture></p>\n<p>That seems to work for now! I'd like to learn other hopefully more simple ways to load materials in Swift. I will update here once I learn more.</p>\n",
			"date_published": "2024-06-29T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/jenga-in-vision-os/",
			"url": "https://vision.rodeo/jenga-in-vision-os/",
			"title": "Build a Jenga game in visionOS",
			"content_html": "<p>Building on the previous posts, we can put everything together into one demo.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/hmhTAbp\" data-context=\"false\">\n  <a href=\"https://imgur.com/a/hmhTAbp\"></a>\n</blockquote>\n<script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<p>This is the goal. To build an interactive Jenga-like brick tower game where the bricks can be removed (and stacked on top) until the tower falls over.</p>\n<h2 id=\"finished-project\" tabindex=\"-1\">Finished project <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>You can <a href=\"https://files.vision.rodeo/xcode/jenga.zip\">download the finished code here</a> as an Xcode project.</p>\n<h2 id=\"topics-covered\" tabindex=\"-1\">Topics covered <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>This work brings together all the previous topics we've covered including:</p>\n<ul>\n<li><a href=\"https://vision.rodeo/immersive-spaces/\">Setting up an immersive space</a></li>\n<li><a href=\"https://vision.rodeo/object-gravity/\">Adding physics to an entity</a></li>\n<li><a href=\"https://vision.rodeo/multiple-objects/\">Creating multiple 3D objects in code</a></li>\n<li><a href=\"https://vision.rodeo/drag-gesture/\">Adding drag gesture to an entity</a></li>\n<li><a href=\"https://vision.rodeo/hover-effect/\">Hover effects on entities</a></li>\n</ul>\n<h2 id=\"getting-started\" tabindex=\"-1\">Getting started <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>Begin with a new Vision Pro app in Xcode. You don't need to change any defaults - we will set up the immersive space in code.</p>\n<h2 id=\"creating-a-table-top-in-reality-composer-pro\" tabindex=\"-1\">Creating a table-top in Reality Composer Pro <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>Before creating the game in code, we can try making and importing a scene from Reality Composer Pro. For this we'll create a simple &quot;table&quot; object to act as a stage on which the blocks can sit.</p>\n<p>First, in your Xcode project, select <code>Packages</code> -&gt; <code>RealityKitContent</code> -&gt; <code>Package</code>, then on the top right select <code>Open in Reality Composer Pro</code>.</p>\n<p>For this project we need a large flat surface. Here's how it will look:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/F0A_zumFZG-3350.avif 3350w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/F0A_zumFZG-3350.webp 3350w\"><img alt=\"Reality Composer showing a 'table' object\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/F0A_zumFZG-3350.png\" width=\"3350\" height=\"1906\"></picture></p>\n<p>To add the floor, select the <code>+</code> on the bottom left of the scene contents list, then select <code>Primative Shape</code> -&gt; <code>Cube</code>. This adds a plain cube. On the top right, we can scale this to the shape needed by setting a scale of <code>1.5</code>, <code>0.02</code> and <code>1.5</code> for <code>x</code>, <code>y</code> and <code>z</code>. I then adjusted it down a little by setting the <code>Position</code> value of <code>y</code> to <code>-8</code>.</p>\n<p>We need a material also. To add a material I select the <code>Show content library</code> on the top right (<code>+</code>). I chose a grey felt material and dragged it into the scene. Then in the cube object, under <code>Material Bindings</code>, select this material.</p>\n<p>I then set up <code>connectors</code>.</p>\n<h3 id=\"connectors-in-reality-composer-pro\" tabindex=\"-1\">Connectors in Reality Composer Pro <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h3>\n<p>We configure the way the 3D object behaves by using connectors. On the right-hand panel select <code>Add Component</code> and add the following:</p>\n<ul>\n<li>Physics Body</li>\n<li>Collision</li>\n</ul>\n<p>Within Physics body make sure <code>Mode</code> is set to <code>Static</code>. This means it won't fall with gravity.</p>\n<p>Under Collision I just left everything default.</p>\n<p>Lastly on the top left change the <code>Cube</code> name to <code>table</code>. We can now switch back to Xcode and use this object.</p>\n<h2 id=\"window-and-immersive-views\" tabindex=\"-1\">Window and Immersive views <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>We set up the two views as before, <code>WindowGroup</code> and <code>ImmersiveSpace</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">JengaApp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> currentStyle<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ImmersionStyle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>mixed\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">var</span> viewModel <span class=\"token operator\">=</span> <span class=\"token class-name\">SharedViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">:</span> viewModel<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">defaultSize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token class-name\">ImmersiveSpace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ImmersiveSpace\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ImmersiveView</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">:</span> viewModel<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">immersionStyle</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">:</span> $currentStyle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>mixed<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This code also instantiates <code>SharedViewModel</code> and passes is into the two views. This will allow us to coordinate resetting the game and handle the game state. We create this later.</p>\n<p>We need to set up a <code>Task</code> in our <code>ContentView</code> that loads the <code>ImmersiveSpace</code> when the app opens:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SharedViewModel</span>\n\n    <span class=\"token attribute atrule\">@Environment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>openImmersiveSpace<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> openImmersiveSpace\n    <span class=\"token attribute atrule\">@Environment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>dismissImmersiveSpace<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> dismissImmersiveSpace\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Jenga\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>extraLargeTitle<span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Reset game\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Code here to reset the game</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> <span class=\"token function\">openImmersiveSpace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ImmersiveSpace\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This sets the windowed view with a title and button to reset the game.</p>\n<h2 id=\"adding-gestures\" tabindex=\"-1\">Adding Gestures <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>We can get some useful code for handling drag and rotate gestures when <a href=\"https://vision.rodeo/advanced-gestures/\">adding gestures to an entity</a>. Copy the files across from the <code>Packages -&gt; RealityKitContent -&gt; Sources -&gt; RealityKitContent</code> &quot;Components&quot; and &quot;Extensions&quot; folders.</p>\n<p>We then set up the immersive view that will be shown.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ImmersiveView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SharedViewModel</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// Code here to load the scene and game pieces</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">installGestures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Entity</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Scene\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> realityKitContentBundle<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This sets up the view and calls <code>installGestures</code> to make the gestures available.</p>\n<h2 id=\"shared-view-model\" tabindex=\"-1\">Shared view model <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>We create a shared model as an <code>ObservableObject</code> in <code>SharedViewModel.swift</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKitContent</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SharedViewModel</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Starting positions for the table and game pieces</span>\n  <span class=\"token keyword\">let</span> startingPositionX<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span>\n  <span class=\"token keyword\">let</span> startingPositionY<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75</span>\n  <span class=\"token keyword\">let</span> startingPositionZ<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.75</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We set it up with some initial data which we can use to ensure a consistent position for our game table and when placing the brick pieces.</p>\n<h2 id=\"adding-floor-and-table\" tabindex=\"-1\">Adding floor and table <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>We can add some code to our model to handle generating a floor:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateFloor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> floor <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generatePlane</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">OcclusionMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    floor<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    floor<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n        mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> floor\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Then in <code>ImmersiveView</code>, we use this as well as loading the <code>table</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> floor <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">generateFloor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> table <span class=\"token operator\">=</span> <span class=\"token function\">loadScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        table<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>startingPositionX <span class=\"token operator\">+</span> viewModel<span class=\"token punctuation\">.</span>pieceWidth\n        table<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>startingPositionY\n        table<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>startingPositionZ <span class=\"token operator\">-</span> viewModel<span class=\"token punctuation\">.</span>pieceWidth\n\n        content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>At this point we should have an empty table and a window. Next we add the brick pieces.</p>\n<h2 id=\"generating-bricks\" tabindex=\"-1\">Generating bricks <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>In the <code>SharedViewModel</code> we can set up the logic to generate these brick pieces:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SharedViewModel</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... other code</span>\n  <span class=\"token keyword\">let</span> numberOfRows <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\n  <span class=\"token keyword\">let</span> pieceWidth<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.075</span>\n  <span class=\"token keyword\">let</span> pieceHeight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.045</span>\n  <span class=\"token keyword\">let</span> pieceDepth<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.225</span>\n\n  <span class=\"token comment\">// ... more code to come here</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>First we set some more values to describe the width, height and depth / length of the pieces. These look ok for my demo and are based on the real proportions.</p>\n<p>We then add a method to generate a model for each brick:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generatePiece</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Simple material</span>\n  <span class=\"token keyword\">var</span> defaultMaterial <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicallyBasedMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  defaultMaterial<span class=\"token punctuation\">.</span>baseColor<span class=\"token punctuation\">.</span>tint <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>orange\n  defaultMaterial<span class=\"token punctuation\">.</span>roughness <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicallyBasedMaterial</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Roughness</span><span class=\"token punctuation\">(</span>floatLiteral<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> piece <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n      mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> pieceWidth<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> pieceHeight<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> pieceDepth<span class=\"token punctuation\">,</span> cornerRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>defaultMaterial<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Shadow</span>\n  piece<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroundingShadowComponent</span><span class=\"token punctuation\">(</span>castsShadow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Input</span>\n  piece<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputTargetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Hover effect</span>\n  piece<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HoverEffectComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Collisions</span>\n  piece<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Physics</span>\n  <span class=\"token keyword\">let</span> physicsMaterial <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicsMaterialResource</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>\n      staticFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.35</span><span class=\"token punctuation\">,</span>\n      dynamicFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span>\n      restitution<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span>\n  <span class=\"token punctuation\">)</span>\n  piece<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n      massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> pieceWidth<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> pieceHeight<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> pieceDepth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mass<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      material<span class=\"token punctuation\">:</span> physicsMaterial<span class=\"token punctuation\">,</span>\n      mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">dynamic</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> piece\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This method sets up a <code>piece</code> and adds all the needed components to let them be dragged, fall with gravity and more.</p>\n<h2 id=\"generating-the-tower\" tabindex=\"-1\">Generating the tower <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>We need to create a tower from a set of pieces. To do this let's set up a method:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SharedViewModel</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... other code</span>\n  <span class=\"token keyword\">var</span> tower <span class=\"token operator\">=</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateTower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> numberOfPieces <span class=\"token operator\">=</span> numberOfRows <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n      tower<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> startingPositionX\n      tower<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> startingPositionY\n      tower<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> startingPositionZ\n\n      <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span>numberOfPieces <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">let</span> piece <span class=\"token operator\">=</span> <span class=\"token function\">generatePiece</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          piece<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"piece-</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n\n          <span class=\"token comment\">// Position the piece in place</span>\n          <span class=\"token function\">positionPiece</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">,</span> piece<span class=\"token punctuation\">:</span> piece<span class=\"token punctuation\">)</span>\n          tower<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>piece<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      tower<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>rotation <span class=\"token operator\">=</span> <span class=\"token function\">simd_quatf</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>pi <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> axis<span class=\"token punctuation\">:</span> SIMD3<span class=\"token operator\">&lt;</span><span class=\"token class-name\">Float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Rotate 45 degrees around the y-axis</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We add a <code>tower</code> of type <code>Entity</code>. This is defined in the class so it can later be used to reset the pieces.</p>\n<p>The first method to use it is <code>generateTower</code>, which positions the entity based on the starting positions, then loops through the required number of pieces and adds them to the entity. We need to create the method that positions the piece.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">positionPiece</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> piece<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> rowIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">/</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">let</span> pieceIndexInGroup <span class=\"token operator\">=</span> index <span class=\"token operator\">%</span> <span class=\"token number\">3</span>\n\n    <span class=\"token keyword\">if</span> rowIndex <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        piece<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span>pieceIndexInGroup<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> pieceWidth\n        piece<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Odd row: align along z-axis</span>\n        piece<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> pieceWidth\n        piece<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span>pieceIndexInGroup<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> pieceWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> pieceWidth\n        piece<span class=\"token punctuation\">.</span>orientation <span class=\"token operator\">=</span> <span class=\"token function\">simd_quatf</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>pi <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> axis<span class=\"token punctuation\">:</span> SIMD3<span class=\"token operator\">&lt;</span><span class=\"token class-name\">Float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Rotate 90 degrees around the y-axis</span>\n    <span class=\"token punctuation\">}</span>\n\n    piece<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span>rowIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> pieceHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> pieceHeight\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This method makes use of the index of the given <code>piece</code>. It works out which row the piece is in and its position in the row. It then turns the piece 90 degrees for every odd-numbered row so that they alternate. These positions are relatvie to the containing <code>tower</code> entity.</p>\n<p>Lastly we build the tower when the shared view model initialises.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">generateTower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"placing-the-tower\" tabindex=\"-1\">Placing the tower <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>With the tower full of pieces we need to place it on the table. Back in <code>ImmersiveView</code>, add the tower to the content:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// ... other code</span>\n    <span class=\"token comment\">// Add pieces</span>\n    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">.</span>tower<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"adding-drag-gesture\" tabindex=\"-1\">Adding drag gesture <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>Now that pieces are in place, we can make the pieces movable using a drag gesture applied to any entity:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">gesture</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">DragGesture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">targetedToAnyEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>onChanged <span class=\"token punctuation\">{</span> value <span class=\"token keyword\">in</span>\n            value<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>location3D<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>parent<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"reset-game-button\" tabindex=\"-1\">Reset game button <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>We should now have a workable Jenga tower. The next step is to have some way to reset it. Add a <code>reset</code> method to the <code>SharedViewModel</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> tower<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> modelEntity <span class=\"token operator\">=</span> child <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n            child<span class=\"token punctuation\">.</span>orientation <span class=\"token operator\">=</span> <span class=\"token function\">simd_quatf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">positionPiece</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">,</span> piece<span class=\"token punctuation\">:</span> modelEntity<span class=\"token punctuation\">)</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This method resets the orientation of the pieces (try it without it - creates a fun explosion) then runs the <code>positionPiece</code> method on each piece to put it back into the starting position.</p>\n<h2 id=\"bonus-going-further\" tabindex=\"-1\">Bonus: Going further <a class=\"header-anchor\" href=\"https://vision.rodeo/jenga-in-vision-os/\">#</a></h2>\n<p>If you want to go further check out these posts:</p>\n<ul>\n<li><a href=\"https://vision.rodeo/loading-material-from-scene/\">Loading materials</a></li>\n<li><a href=\"https://vision.rodeo/detecting-collisions/\">Detecting collisions</a></li>\n<li><a href=\"https://vision.rodeo/playing-sounds/\">Playing sounds</a></li>\n</ul>\n",
			"date_published": "2024-06-28T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/hover-effect/",
			"url": "https://vision.rodeo/hover-effect/",
			"title": "Simple hover effect",
			"content_html": "<p>Following from adding <a href=\"https://vision.rodeo/advanced-gestures/\">advanced gestures</a>, we can make the interaction easier by adding a hover effect.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/jAPaQ3T\" data-context=\"false\">\n  <a href=\"https://imgur.com/a/jAPaQ3T\">Simple hover effect</a>\n  </blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\">\n</script>\n<h2 id=\"adding-hovereffectcomponent\" tabindex=\"-1\">Adding HoverEffectComponent() <a class=\"header-anchor\" href=\"https://vision.rodeo/hover-effect/\">#</a></h2>\n<p>In the shared view model, when adding <code>components</code>, add the <a href=\"https://developer.apple.com/documentation/realitykit/hovereffectcomponent\">HoverEffectComponent</a>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">shape<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HoverEffectComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>As long as the entities have an <a href=\"https://developer.apple.com/documentation/realitykit/inputtargetcomponent\">InputTargetComponent</a> and <a href=\"https://developer.apple.com/documentation/realitykit/collisioncomponent\">CollisionComponent</a> they will receive hover effects. Those were added in previous posts.</p>\n<p>And that's it! The <a href=\"https://developer.apple.com/documentation/realitykit/hovereffectcomponent\">documentation</a> suggests being able to customise the effect but I've not managed to get the examples working yet. I'll update here if I do so.</p>\n",
			"date_published": "2024-06-25T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/advanced-gestures/",
			"url": "https://vision.rodeo/advanced-gestures/",
			"title": "Advanced gestures",
			"content_html": "<p>After <a href=\"https://vision.rodeo/multiple-objects/\">creating multiple 3D objects in a visionOS scene</a>, I thought it would be good to go further than the simple drag gesture mentioned there.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/5HG8G7i\" data-context=\"false\"><a href=\"https://imgur.com/a/5HG8G7i\"></a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<p>In my research, I found an Apple article on <a href=\"https://developer.apple.com/documentation/realitykit/transforming-realitykit-entities-with-gestures\">transforming realitykit entities with gestures</a>.</p>\n<h2 id=\"installing-components-and-extensions\" tabindex=\"-1\">Installing Components and Extensions <a class=\"header-anchor\" href=\"https://vision.rodeo/advanced-gestures/\">#</a></h2>\n<p>In <a href=\"https://docs-assets.developer.apple.com/published/0d923bca7c76/TransformingRealityKitEntitiesUsingGestures.zip\">the downloaded code</a> the <code>RealityKitContent</code> includes <code>Components</code> and <code>Extensions</code> folders with code for handling gestures. I copied these across into my project's RealityKitContent folder.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/QPMg47Z-vt-496.avif 496w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/QPMg47Z-vt-496.webp 496w\"><img alt=\"Copied Components and Extensions folders\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/QPMg47Z-vt-496.png\" width=\"496\" height=\"552\"></picture></p>\n<p>These have been set up to allow for customisation in how we apply gestures. The first thing though is install the extensions:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> floor <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">generateFloor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">addEntities</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> update<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token function\">addEntities</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">installGestures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>The <code>installGestures</code> method sets up the extensions.</p>\n<h2 id=\"using-with-reality-composer-pro\" tabindex=\"-1\">Using with Reality Composer Pro <a class=\"header-anchor\" href=\"https://vision.rodeo/advanced-gestures/\">#</a></h2>\n<p>As the above files are added to the Reality Composer Pro scene, they become available as settings to allow interaction on objects and scenes defined there. However I'd like to try to apply the code to the objects created dynamically within my app.</p>\n<h2 id=\"applying-to-entities\" tabindex=\"-1\">Applying to entities <a class=\"header-anchor\" href=\"https://vision.rodeo/advanced-gestures/\">#</a></h2>\n<p>In the shared view model (<code>SharedViewModel</code>), I added the <code>components</code> to handle gestures like so:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> jsonData <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"\"\n{\n    \"canDrag\": true,\n    \"pivotOnDrag\": true,\n    \"preserveOrientationOnPivotDrag\": true,\n    \"canScale\": true,\n    \"canRotate\": true\n}\n\"\"\"</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> decoder <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> gestureComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GestureComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> jsonData<span class=\"token punctuation\">)</span>\n    shape<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>gestureComponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Failed to decode JSON: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">error</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This sets up the configuration, in which you can set to <code>true</code> or <code>false</code> the various options, then encodes the config. It then uses a JSON decoder with the <code>GestureComponent.self</code> type to create a <code>gestureComponent</code>, all configured with our interaction settings. We then apply this to the <code>shape</code> with <code>shape.components.set(gestureComponent)</code>.</p>\n",
			"date_published": "2024-06-20T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/multiple-objects/",
			"url": "https://vision.rodeo/multiple-objects/",
			"title": "Multiple objects",
			"content_html": "<p>Following on from <a href=\"https://vision.rodeo/object-gravity/\">adding gravity to a 3D object</a>, we will now explore how to set up and display any number of 3D objects.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/dIaFeEq\" data-context=\"false\"><a href=\"https://imgur.com/a/dIaFeEq\">Random shapes</a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<h2 id=\"creating-a-shared-view-model\" tabindex=\"-1\">Creating a shared view model <a class=\"header-anchor\" href=\"https://vision.rodeo/multiple-objects/\">#</a></h2>\n<p>In this demo I wanted to create a window containing a button that when pressed, would add a random object to the immersive space.</p>\n<p>To achieve this I need a <em>shared</em> state between the <code>WindowGroup</code> and <code>ImmersiveSpace</code> views. One way to do this is to set up a view model and pass it into both views.</p>\n<p>To ensure the views respond to changes in the model, I'm setting it up as an <code>ObservableObject</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SharedViewModel</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> objects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// Code to generate objects</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Firstly I set up some data for use inside this class, such as an index for naming the objects, shape styles and colors:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">let</span> shapes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">MeshResource</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> cornerRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">generateCone</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">generateCylinder</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">generateSphere</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> colors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>orange<span class=\"token punctuation\">]</span></code></pre>\n<p>Then I add a method that I can call from the <code>WindowGroup</code> to add a shape:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">addShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    objects<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>I now need to create the <code>generateShape</code> method:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> mesh <span class=\"token operator\">=</span> shapes<span class=\"token punctuation\">.</span><span class=\"token function\">randomElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> cornerRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> shape <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> mesh<span class=\"token punctuation\">,</span>\n        materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">randomElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    shape<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Shape_</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">index</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n    index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">// Scale and position</span>\n    shape<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">=</span>  SIMD3<span class=\"token operator\">&lt;</span><span class=\"token class-name\">Float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token operator\">...</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token operator\">...</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token operator\">...</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    shape<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token operator\">...</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    shape<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token operator\">...</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    shape<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token operator\">...</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Components</span>\n    shape<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroundingShadowComponent</span><span class=\"token punctuation\">(</span>castsShadow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    shape<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputTargetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Collisions</span>\n    shape<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Physics</span>\n    <span class=\"token keyword\">let</span> physicsMaterial <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicsMaterialResource</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>\n        staticFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n        dynamicFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n        restitution<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// How bouncy</span>\n    <span class=\"token punctuation\">)</span>\n    shape<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n        material<span class=\"token punctuation\">:</span> physicsMaterial<span class=\"token punctuation\">,</span>\n        mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">dynamic</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> shape\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This makes use of the shapes and colors arrays, along with a few random float values to create some random primative shapes and position them in the scene.</p>\n<p>Lastly, I'll add a method for generating the floor so the objects have something to land on:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateFloor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> floor <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generatePlane</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">OcclusionMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    floor<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    floor<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n        mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> floor\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The bulk of the code is now in place for the demo. Next we just need to use it.</p>\n<h2 id=\"applying-the-shared-view-model\" tabindex=\"-1\">Applying the shared view model <a class=\"header-anchor\" href=\"https://vision.rodeo/multiple-objects/\">#</a></h2>\n<p>We can apply the model by creating a <code>@StateObject</code> instance in the parent view and sharing it with child views.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token attribute atrule\">@main</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">DemoApp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> currentStyle<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ImmersionStyle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>mixed\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">var</span> viewModel <span class=\"token operator\">=</span> <span class=\"token class-name\">SharedViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">:</span> viewModel<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">defaultSize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token class-name\">ImmersiveSpace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ImmersiveSpace\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ImmersiveView</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">:</span> viewModel<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">immersionStyle</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">:</span> $currentStyle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>mixed<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In this case I'm creating an instance of <code>viewModel</code> and passing it to <code>ContentView</code> and <code>ImmersiveView</code>. By doing this, they will be able to make use of it and be in sync.</p>\n<h2 id=\"content-view\" tabindex=\"-1\">Content view <a class=\"header-anchor\" href=\"https://vision.rodeo/multiple-objects/\">#</a></h2>\n<p>In the content view, we set up an <code>@ObservedObject</code> instance of the <code>viewModel</code>. We then set up a <code>Button</code> that makes use of the <code>addShape</code> method from the view model.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SharedViewModel</span>\n\n    <span class=\"token attribute atrule\">@Environment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>openImmersiveSpace<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> openImmersiveSpace\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Add shape\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">addShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> <span class=\"token function\">openImmersiveSpace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ImmersiveSpace\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This view also includes a <code>task</code> that opens the immersive space on load. No need to press a button!</p>\n<h2 id=\"immersive-view\" tabindex=\"-1\">Immersive view <a class=\"header-anchor\" href=\"https://vision.rodeo/multiple-objects/\">#</a></h2>\n<p>Lastly we need to show the shapes in the <code>ImmersiveView</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ImmersiveView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SharedViewModel</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">let</span> floor <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">generateFloor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">addEntities</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> update<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            <span class=\"token function\">addEntities</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">addEntities</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">RealityViewContent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> object <span class=\"token keyword\">in</span> viewModel<span class=\"token punctuation\">.</span>objects <span class=\"token punctuation\">{</span>\n            content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This view starts by also setting up an <code>@ObservedObject</code> <code>viewModel</code>, so we can display the <code>viewModel.objects</code> array. The <code>addEntities</code> method adds them to the scene, and the <code>update</code> method is called whenever the viewModel changes, adding any newly created shapes to the <code>content</code> of the scene.</p>\n<h3 id=\"adding-a-drag-gesture\" tabindex=\"-1\">Adding a drag gesture <a class=\"header-anchor\" href=\"https://vision.rodeo/multiple-objects/\">#</a></h3>\n<p>You can set the shapes to respond to gestures as before, but instead of having the gesture targeted to one specific entity, apply <code>targetedToAnyEntity</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> floor <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">generateFloor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">addEntities</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> update<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token function\">addEntities</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">gesture</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">DragGesture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">targetedToAnyEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>onChanged <span class=\"token punctuation\">{</span> value <span class=\"token keyword\">in</span>\n        value<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>location3D<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span>parent<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>This will give the <code>value</code> that itself contains the entity being selected. From there we can then apply the position.</p>\n",
			"date_published": "2024-06-19T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/object-gravity/",
			"url": "https://vision.rodeo/object-gravity/",
			"title": "Adding gravity",
			"content_html": "<p>Following on from <a href=\"https://vision.rodeo/drag-gesture/\">adding a drag gesture</a>, we can make it respond to gravity using a <a href=\"https://developer.apple.com/documentation/realitykit/physicsbodycomponent\">PhysicsBodyComponent</a>.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/pfxjclk\" data-context=\"false\"><a href=\"https://imgur.com/a/pfxjclk\"></a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<p>Starting with a simple reflective cube this time, adjusting from the sphere in <a href=\"https://vision.rodeo/drag-gesture/\">the drag example</a>. I've also adjusted the scale and position to make it easier to see. In the video above, it's being shown in the &quot;museum&quot; environment as it has a good amount of floor space. This demo won't account for furniture.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// Cube entity</span>\n    cube <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Scale and position</span>\n    cube<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n    cube<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    cube<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span>\n\n    <span class=\"token comment\">// Components</span>\n    cube<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroundingShadowComponent</span><span class=\"token punctuation\">(</span>castsShadow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cube<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputTargetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Collisions</span>\n    cube<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n\n    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">gesture</span><span class=\"token punctuation\">(</span>\n<span class=\"token class-name\">DragGesture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">targetedToEntity</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>onChanged <span class=\"token punctuation\">{</span> value <span class=\"token keyword\">in</span>\n        cube<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>location3D<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> orb<span class=\"token punctuation\">.</span>parent<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"adding-physics\" tabindex=\"-1\">Adding physics <a class=\"header-anchor\" href=\"https://vision.rodeo/object-gravity/\">#</a></h2>\n<p>The cube can be dragged around and will stay position when released. We can add some gravity physics to make it fall:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> physicsMaterial <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicsMaterialResource</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>\n    staticFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>\n    dynamicFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    restitution<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01</span> <span class=\"token comment\">// How bouncy</span>\n<span class=\"token punctuation\">)</span>\ncube<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n    massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n    material<span class=\"token punctuation\">:</span> physicsMaterial<span class=\"token punctuation\">,</span>\n    mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">dynamic</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>In this we're creating a <code>PhysicsMaterialResource</code> which allows us to specify friction and <code>restition</code> (bounciness). A low value here means it'll behave like a solid heavy block of metal. A higher value and it'll bounce around more.</p>\n<p>We apply this <code>PhysicsMaterialResource</code> as a material within the <code>PhysicsBodyComponent</code> component, and set <code>mode</code> to <code>dynamic</code> so that it will move.</p>\n<h2 id=\"creating-a-floor\" tabindex=\"-1\">Creating a floor <a class=\"header-anchor\" href=\"https://vision.rodeo/object-gravity/\">#</a></h2>\n<p>Without a floor, the cube just falls away. We can add a floor entity:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> floor <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n    mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generatePlane</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">OcclusionMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\nfloor<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\nfloor<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n    massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n    mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span>\n<span class=\"token punctuation\">)</span>\ncontent<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">)</span></code></pre>\n<p>Here we generate a <code>ModelEntity</code> made of a <code>plane</code> and using an <a href=\"https://developer.apple.com/documentation/realitykit/occlusionmaterial\">OcclusionMaterial</a>. This is an invisible material which hides any objects rendered behind it.</p>\n<p>With the physics enabled, the objects will fall and land on a &quot;floor&quot;.</p>\n<h2 id=\"finished-code\" tabindex=\"-1\">Finished code <a class=\"header-anchor\" href=\"https://vision.rodeo/object-gravity/\">#</a></h2>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// Floor</span>\n    <span class=\"token keyword\">let</span> floor <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generatePlane</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">OcclusionMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    floor<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    floor<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n        mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span>\n    <span class=\"token punctuation\">)</span>\n    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Cube</span>\n    cube <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n        mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateBox</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Scale and position</span>\n    cube<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n    cube<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    cube<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span>\n\n    <span class=\"token comment\">// Components</span>\n    cube<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroundingShadowComponent</span><span class=\"token punctuation\">(</span>castsShadow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cube<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputTargetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Collisions</span>\n    cube<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Physics</span>\n    <span class=\"token keyword\">let</span> physicsMaterial <span class=\"token operator\">=</span> <span class=\"token class-name\">PhysicsMaterialResource</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>\n        staticFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>\n        dynamicFriction<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n        restitution<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01</span> <span class=\"token comment\">// How bouncy</span>\n    <span class=\"token punctuation\">)</span>\n    cube<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token class-name\">PhysicsBodyComponent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        massProperties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>\n        material<span class=\"token punctuation\">:</span> physicsMaterial<span class=\"token punctuation\">,</span>\n        mode<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">dynamic</span>\n    <span class=\"token punctuation\">)</span>\n\n    content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">gesture</span><span class=\"token punctuation\">(</span>\n<span class=\"token class-name\">DragGesture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">targetedToEntity</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>onChanged <span class=\"token punctuation\">{</span> value <span class=\"token keyword\">in</span>\n        cube<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>location3D<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> orb<span class=\"token punctuation\">.</span>parent<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre>\n",
			"date_published": "2024-06-15T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/drag-gesture/",
			"url": "https://vision.rodeo/drag-gesture/",
			"title": "Dragging objects",
			"content_html": "<p>With the 3D orb <a href=\"https://vision.rodeo/immersive-spaces/\">created in this post</a>, we can enable dragging with gestures.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/jBKlM3C\" data-context=\"false\"><a href=\"https://imgur.com/a/jBKlM3C\"></a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<h2 id=\"starting-code\" tabindex=\"-1\">Starting code <a class=\"header-anchor\" href=\"https://vision.rodeo/drag-gesture/\">#</a></h2>\n<p>We begin with some code that sets up a <code>RealityView</code> and creates a shiny metallic orb. It sets the scale and position so that it's in front of us.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ImmersiveView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            orb <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n                 mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateSphere</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                 materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Scale and position</span>\n            orb<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            orb<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0.75</span>\n            orb<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n            content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>orb<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"adding-gesture\" tabindex=\"-1\">Adding gesture <a class=\"header-anchor\" href=\"https://vision.rodeo/drag-gesture/\">#</a></h2>\n<p>Interaction in visionOS is handled using <a href=\"https://developer.apple.com/design/human-interface-guidelines/gestures\">gestures</a>.</p>\n<p>We add a gesture to our <code>RealityView</code> like so, and pass in a <code>DragGesture</code>.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">//... orb code</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">gesture</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">DragGesture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">targetedToEntity</span><span class=\"token punctuation\">(</span>orb<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>onChanged <span class=\"token punctuation\">{</span> value <span class=\"token keyword\">in</span>\n            orb<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>location3D<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> orb<span class=\"token punctuation\">.</span>parent<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>The <code>DragGesture</code> is configured using <code>targetedToEntity</code>, which specifies which entity to use, and then we listen for an <code>onChange</code> event. This event gives us the value, as a <code>location3D</code> entry. We need to convert that to work with the <code>Set3D</code> coordinates used by our orb.</p>\n<p>With the gesture in place, it's not working quite yet. We can make the position change stick by applying some modifiers to the orb.</p>\n<h2 id=\"components-and-collisions\" tabindex=\"-1\">Components and collisions <a class=\"header-anchor\" href=\"https://vision.rodeo/drag-gesture/\">#</a></h2>\n<p>Inside the <code>RealityView</code> struct, add some configuration to tell the orb to receive the position change:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token comment\">// Components</span>\norb<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputTargetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Collisions</span>\norb<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre>\n<p>The first component is <a href=\"https://developer.apple.com/documentation/realitykit/inputtargetcomponent\">InputTargetComponent</a>. We set this to configure which sorts of <code>allowedInputTypes</code> it can receive. By default it is <code>all</code>, though if we want that can be configured by passing in an <code>allowedInputTypes</code> value.</p>\n<p>We then set <code>generateCollisionShapes</code> with <code>recursive</code> set to true.</p>\n<p>With these in place, we can drag the orb around.</p>\n<h2 id=\"adding-shadow\" tabindex=\"-1\">Adding shadow <a class=\"header-anchor\" href=\"https://vision.rodeo/drag-gesture/\">#</a></h2>\n<p>For some polish, and to help see where the orb is when moving it, we can add a shadow:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">orb<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroundingShadowComponent</span><span class=\"token punctuation\">(</span>castsShadow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"finished-code\" tabindex=\"-1\">Finished code <a class=\"header-anchor\" href=\"https://vision.rodeo/drag-gesture/\">#</a></h2>\n<p>Putting it all together, the finished draggable result is:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ImmersiveView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> orb <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            orb <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n                 mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateSphere</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                 materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Scale and position</span>\n            orb<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            orb<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0.75</span>\n            orb<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n            <span class=\"token comment\">// Components</span>\n            orb<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputTargetComponent</span><span class=\"token punctuation\">(</span>allowedInputTypes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">indirect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            orb<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroundingShadowComponent</span><span class=\"token punctuation\">(</span>castsShadow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">// Collisions</span>\n            orb<span class=\"token punctuation\">.</span><span class=\"token function\">generateCollisionShapes</span><span class=\"token punctuation\">(</span>recursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n            content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>orb<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">gesture</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">DragGesture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">targetedToEntity</span><span class=\"token punctuation\">(</span>orb<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span>onChanged <span class=\"token punctuation\">{</span> value <span class=\"token keyword\">in</span>\n                    orb<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>location3D<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> orb<span class=\"token punctuation\">.</span>parent<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2024-06-14T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/immersive-spaces/",
			"url": "https://vision.rodeo/immersive-spaces/",
			"title": "Immersive spaces",
			"content_html": "<p>This post will cover what an <a href=\"https://developer.apple.com/documentation/swiftui/immersivespace\">immersive space</a> is, when you might want to use it, and how to set it up in Xcode.</p>\n<h2 id=\"immersive-space\" tabindex=\"-1\">Immersive space <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h2>\n<p>Unlike a <a href=\"https://vision.rodeo/blender-file-in-vision/\">windowed window</a>, or a <a href=\"http://localhost:8080/volumetric-window-group/\">volumetric window</a>, an <em>immersive space</em> is an unbounded space within which you can display content. You can use it when you want to remove all other distractions, and place your app either in a mixed environment, in which the user's view is still visible, or a fully immersive environment in which your app takes over the entire view.</p>\n<p>This can be useful if you want to create an app that exists within the environment but not be bounded by the boxes of windows or volumes.</p>\n<h3 id=\"when-it-s-useful\" tabindex=\"-1\">When it's useful <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h3>\n<p>An immersive space will remove all other apps when opened. It can be useful for creating focused apps or apps that may involve multiple personas.</p>\n<p>If you want to create window-style apps with related windows that may be 3D, then a volumetric window can be a better fit as the positioning is then handled automatically.</p>\n<p>An immersive space is best when you want to have control over positioning in relation to the user.</p>\n<h2 id=\"demo\" tabindex=\"-1\">Demo <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h2>\n<p>Here's the simple demo top show how an immersive view can be triggered.</p>\n<h3 id=\"before\" tabindex=\"-1\">Before <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h3>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/MWmWdtD4E8-1762.avif 1762w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/MWmWdtD4E8-1762.webp 1762w\"><img alt=\"Simulator showing a window with toggle button\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/MWmWdtD4E8-1762.png\" width=\"1762\" height=\"1278\"></picture></p>\n<h3 id=\"after\" tabindex=\"-1\">After <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h3>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/SdomvLtQxs-1726.avif 1726w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/SdomvLtQxs-1726.webp 1726w\"><img alt=\"Toggle button pressed, orb showing\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/SdomvLtQxs-1726.png\" width=\"1726\" height=\"1328\"></picture></p>\n<h2 id=\"app-view\" tabindex=\"-1\">App view <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h2>\n<p>Beginning with your app's App view, add an <code>ImmersiveSpace</code> as follows:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> currentStyle<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ImmersionStyle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>mixed\n\n<span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">ImmersiveSpace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ImmersiveSpace\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ImmersiveView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">immersionStyle</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">:</span> $currentStyle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>mixed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Note that <code>currentStyle</code> is also specified here, so the user can choose to enter a full or mixed immersive space as needed. Within the <code>ImmersiveSpace</code>, <code>ImmersiveView()</code> is shown.</p>\n<h2 id=\"immersiveview\" tabindex=\"-1\">ImmersiveView <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h2>\n<p>The ImmersiveView is a simple <code>RealityView</code> that displays a sphere model. Since objects in an immersive space are not set within bounds like windows, positioning takes place from ground level where the user's feet are. In this case I'm setting <code>y</code> to <code>0.5</code>, which lifts the sphere 0.5m from the ground and setting <code>z</code> to <code>-1</code> to bring the away from the user.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKitContent</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ImmersiveView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token class-name\">ModelEntity</span><span class=\"token punctuation\">(</span>\n                 mesh<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">generateSphere</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                 materials<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SimpleMaterial</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> isMetallic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            model<span class=\"token punctuation\">.</span>scale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            model<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n            model<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We then bring it together with the <code>ContentView</code> to handle showing the immersive space.</p>\n<h2 id=\"contentview\" tabindex=\"-1\">ContentView <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h2>\n<p>In the content view we use <code>openImmersiveSpace</code> and <code>dismissImmersiveSpace</code> to show and hide the immersive space. In the UI we have a toggle button which when pressed, calls the <code>showImmersiveSpace</code>. Lastly there's an <code>onChange</code> to handle setting whether the space is shown or not.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKitContent</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> showImmersiveSpace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> immersiveSpaceIsShown <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token attribute atrule\">@Environment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>openImmersiveSpace<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> openImmersiveSpace\n    <span class=\"token attribute atrule\">@Environment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>dismissImmersiveSpace<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> dismissImmersiveSpace\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Ponder the orb\"</span></span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>extraLargeTitle<span class=\"token punctuation\">)</span>\n\n            <span class=\"token class-name\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Show Immersive Space\"</span></span><span class=\"token punctuation\">,</span> isOn<span class=\"token punctuation\">:</span> $showImmersiveSpace<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">toggleStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> showImmersiveSpace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token omit keyword\">_</span><span class=\"token punctuation\">,</span> newValue <span class=\"token keyword\">in</span>\n            <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> newValue <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">switch</span> <span class=\"token keyword\">await</span> <span class=\"token function\">openImmersiveSpace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ImmersiveSpace\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>opened<span class=\"token punctuation\">:</span>\n                        immersiveSpaceIsShown <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n                    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>userCancelled <span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">fallthrough</span>\n                    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                        immersiveSpaceIsShown <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n                        showImmersiveSpace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> immersiveSpaceIsShown <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">await</span> <span class=\"token function\">dismissImmersiveSpace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    immersiveSpaceIsShown <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>With that we can toggle the immersive space, and display content within it.</p>\n<h2 id=\"creating-an-immersive-first-app\" tabindex=\"-1\">Creating an immersive-first app <a class=\"header-anchor\" href=\"https://vision.rodeo/immersive-spaces/\">#</a></h2>\n<p>If you don't want to make use of the toggle to switch into immersive mode, you can update the app to be in immersive mode by default. In <code>info.plist</code>, update the following:</p>\n<pre><code>Preferred Default Scene Session Role: Window Application Session Role\n</code></pre>\n<p>Change it to:</p>\n<pre><code>Preferred Default Scene Session Role: Immersive Space Application Session Role\n</code></pre>\n<p>That should start the app in immersive space.</p>\n<p>Alternately, you can change the <code>.onChange(of: showImmersiveSpace)</code> block to instead run a <code>task</code> on load, replacing the <code>onChange</code> block to:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">openImmersiveSpace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ImmersiveSpace\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2024-06-13T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/volumetric-window-group/",
			"url": "https://vision.rodeo/volumetric-window-group/",
			"title": "Volumetric windows",
			"content_html": "<p>Now that we can <a href=\"https://vision.rodeo/blender-file-in-vision/\">import a Blender file to RealityKit</a>, let's make it look fancy in it's own <em>volumetric window</em>.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/02Lb3Wk\" data-context=\"false\"><a href=\"https://imgur.com/a/02Lb3Wk\">Do a pushup! (Vision Pro demo)</a></blockquote><script async=\"\" src=\"https://s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>\n<h2 id=\"initial-plain-windowgroup\" tabindex=\"-1\">Initial plain WindowGroup <a class=\"header-anchor\" href=\"https://vision.rodeo/volumetric-window-group/\">#</a></h2>\n<p>In your app's root view, apply the <code>plain</code> windowStyle to the main WindowGroup:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">windowStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>plain<span class=\"token punctuation\">)</span></code></pre>\n<p>This removes the usual window's background. To make our own, smaller view, we set up <code>ContentView</code>.</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Environment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>openWindow<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> openWindow\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Do a pushup!\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>extraLargeTitle<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">glassBackgroundEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>onAppear <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">openWindow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"model\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This view has some text, with padding and a glass background. It also has an <code>onAppear</code> method that runs <code>openWindow</code>.</p>\n<p>This <code>openWindow</code> method comes from the <code>@Environment(\\.openWindow)</code> setting. It's trying to open a window with <code>id</code> of <code>model</code>. We need to add that.</p>\n<h2 id=\"volumetric-windowgroup\" tabindex=\"-1\">Volumetric WindowGroup <a class=\"header-anchor\" href=\"https://vision.rodeo/volumetric-window-group/\">#</a></h2>\n<p>Back in the root file, alongside the plain WindowGroup, add a second WindowGroup:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">WindowGroup</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"model\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ModelView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">windowStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>volumetric<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">defaultSize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>meters<span class=\"token punctuation\">)</span></code></pre>\n<p>This sets the <code>windowStyle</code> to <code>volumetric</code> and gives it a size of <code>1m</code> cubed. It also displays a <code>ModelView</code>. We should add that.</p>\n<h2 id=\"set-up-modelview\" tabindex=\"-1\">Set up ModelView <a class=\"header-anchor\" href=\"https://vision.rodeo/volumetric-window-group/\">#</a></h2>\n<p>Based on the code <a href=\"https://vision.rodeo/blender-file-in-vision/\">from this post</a>, I set up a standalone <code>ModelView</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKitContent</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ModelView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> animatedModel <span class=\"token operator\">=</span> <span class=\"token function\">loadEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>animatedModel<span class=\"token punctuation\">)</span>\n                animatedModel<span class=\"token punctuation\">.</span>isEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> update<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> character <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">.</span>first <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\n            character<span class=\"token punctuation\">.</span>isEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            character<span class=\"token punctuation\">.</span>availableAnimations<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> animation <span class=\"token keyword\">in</span>\n                character<span class=\"token punctuation\">.</span><span class=\"token function\">playAnimation</span><span class=\"token punctuation\">(</span>animation<span class=\"token punctuation\">.</span><span class=\"token keyword\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Entity</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> entity <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Scene\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> realityKitContentBundle<span class=\"token punctuation\">)</span>\n\n        entity<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">setScale</span><span class=\"token punctuation\">(</span><span class=\"token function\">SIMD3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> relativeTo<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span>\n        entity<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">SIMD3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> relativeTo<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> entity\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>A couple of small changes here, in the <code>loadEntity</code> function. I adjusted <code>setScale</code> to <code>0.1</code> to make the model a big bigger. I also added <code>setPosition</code> with a <code>y</code> value of <code>-0.25</code> to move the model down a little. Play around with values that suit your setup.</p>\n<h2 id=\"launch-in-simulator\" tabindex=\"-1\">Launch in simulator <a class=\"header-anchor\" href=\"https://vision.rodeo/volumetric-window-group/\">#</a></h2>\n<p>When you launch the app, you should now see a small window with &quot;Do a pushup!&quot; which then opens a second window, with your 3D model. You can drag the handles to position and move the object.</p>\n<h2 id=\"shadow\" tabindex=\"-1\">Shadow <a class=\"header-anchor\" href=\"https://vision.rodeo/volumetric-window-group/\">#</a></h2>\n<p>Thanks to <em>hhjgjhghjghjghjg</em> <a href=\"https://forums.developer.apple.com/forums/thread/733918\">for this suggestion</a> to extend <code>Entity</code> and introduce a <code>enumerateHierarchy</code> method that can be used to walk through all the components of the <code>usdz</code> source. The extension looks like this:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Entity</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Executes a closure for each of the entity's child and descendant</span>\n  <span class=\"token comment\">// entities, as well as for the entity itself.</span>\n  <span class=\"token comment\">//</span>\n  <span class=\"token comment\">// Set `stop` to true in the closure to abort further processing of the child entity subtree.</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">enumerateHierarchy</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> body<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UnsafeMutablePointer</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> stop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n      <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> body<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UnsafeMutablePointer</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">guard</span> <span class=\"token operator\">!</span>stop <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stop<span class=\"token punctuation\">)</span>\n\n          <span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> children <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">guard</span> <span class=\"token operator\">!</span>stop <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">break</span>\n              <span class=\"token punctuation\">}</span>\n              child<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateHierarchy</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>It's then applied to the entity like so:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">entity<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>enumerateHierarchy <span class=\"token punctuation\">{</span> entity<span class=\"token punctuation\">,</span> stop <span class=\"token keyword\">in</span>\n  <span class=\"token keyword\">if</span> entity <span class=\"token keyword\">is</span> <span class=\"token class-name\">ModelEntity</span> <span class=\"token punctuation\">{</span>\n      entity<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroundingShadowComponent</span><span class=\"token punctuation\">(</span>castsShadow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We should now have a pair of WindowGroups that load then the app loads, with one being a <code>.plain</code> window which then triggers the appearance of the <code>model</code> WindowGroup.</p>\n",
			"date_published": "2024-06-12T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/blender-file-in-vision/",
			"url": "https://vision.rodeo/blender-file-in-vision/",
			"title": "Animated Blender entity in RealityView",
			"content_html": "<p>Starting with a Blender model we will export, convert it, and display it in a Vision Pro app.</p>\n<p>I found <a href=\"https://www.youtube.com/watch?v=ycJO3DKTsDM\">this Youtube video from Sebastian Kotarski</a> very helpful in getting this example put together. Here's the finished result:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/Ix6VDSaiz2-1614.avif 1614w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/Ix6VDSaiz2-1614.webp 1614w\"><img alt=\"Finished animated model\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/Ix6VDSaiz2-1614.png\" width=\"1614\" height=\"1150\"></picture></p>\n<h2 id=\"convert-blender-file-to-usdz\" tabindex=\"-1\">Convert Blender file to USDZ <a class=\"header-anchor\" href=\"https://vision.rodeo/blender-file-in-vision/\">#</a></h2>\n<p>To get started I chose a model from my <a href=\"http://reps.hop.ie\">Reps app</a>. Rather than create animation in Reality Composer Pro, this model has an animation already built-in.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/kkggEtt4mT-2558.avif 2558w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/kkggEtt4mT-2558.webp 2558w\"><img alt=\"A blender model with animation\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/kkggEtt4mT-2558.png\" width=\"2558\" height=\"1800\"></picture></p>\n<p>You can <a href=\"https://files.vision.rodeo/blender/pushup-05.blend.zip\">download the Blender file here</a>.</p>\n<p>The first step is to export this model as a <code>GLB</code> file (gITF 2.0)</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/Nb3qybsBTS-978.avif 978w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/Nb3qybsBTS-978.webp 978w\"><img alt=\"Export GLB file from Blender\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/Nb3qybsBTS-978.png\" width=\"978\" height=\"666\"></picture></p>\n<h2 id=\"reality-converter\" tabindex=\"-1\">Reality Converter <a class=\"header-anchor\" href=\"https://vision.rodeo/blender-file-in-vision/\">#</a></h2>\n<p>With the file exported, it can be converted in Reality Converter. Press Command + Space and type &quot;Reality Converter&quot; to find it.</p>\n<p>You can then drag the exported <code>glb</code> file into the converter:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/L-nmIqw76D-2130.avif 2130w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/L-nmIqw76D-2130.webp 2130w\"><img alt=\"Converting the GLB file to USDZ\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/L-nmIqw76D-2130.png\" width=\"2130\" height=\"1560\"></picture></p>\n<p>Select <code>File -&gt; Export</code> to export this as <code>usdz</code>.</p>\n<h2 id=\"set-up-in-reality-composer-pro\" tabindex=\"-1\">Set up in Reality Composer Pro <a class=\"header-anchor\" href=\"https://vision.rodeo/blender-file-in-vision/\">#</a></h2>\n<p>Open Xcode and start a new Vision Pro App. In the demo code, there's a <code>RealityKitContent</code> package already in place with a sphere in it. We can change it to use our model. Open <code>Packages -&gt; RealityKitContent -&gt; Package</code>.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/fIZ1ZZWpoD-528.avif 528w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/fIZ1ZZWpoD-528.webp 528w\"><img alt=\"Select the package\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/fIZ1ZZWpoD-528.png\" width=\"528\" height=\"418\"></picture></p>\n<p>Select &quot;Open In Reality Composer Pro&quot; at the top-right corner.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/fb-zKS28Fx-2366.avif 2366w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/fb-zKS28Fx-2366.webp 2366w\"><img alt=\"Open in Reality Composer Pro\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/fb-zKS28Fx-2366.png\" width=\"2366\" height=\"1232\"></picture></p>\n<p>Select and delete the sphere. Then add the new model by dragging the exported model file into the assets at bottom.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/IROV4991tR-2744.avif 2744w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/IROV4991tR-2744.webp 2744w\"><img alt=\"Reality Composer Pro\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/IROV4991tR-2744.png\" width=\"2744\" height=\"1838\"></picture></p>\n<p>Then, drag this new asset into the scene and position it in the center. If needed, you can adjust angle or size when selecting the model.</p>\n<p>Remember to press <code>Save</code> before closing Reality Composer Pro.</p>\n<h2 id=\"open-in-project\" tabindex=\"-1\">Open in Project <a class=\"header-anchor\" href=\"https://vision.rodeo/blender-file-in-vision/\">#</a></h2>\n<p>Return to XCode and open <code>ContentView</code>, let the preview load (or load preview) and you should see the model.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/pQeuHR1QGU-1570.avif 1570w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/pQeuHR1QGU-1570.webp 1570w\"><img alt=\"Initial model pose\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/pQeuHR1QGU-1570.png\" width=\"1570\" height=\"1088\"></picture></p>\n<h2 id=\"applying-animation-from-blender\" tabindex=\"-1\">Applying animation from Blender <a class=\"header-anchor\" href=\"https://vision.rodeo/blender-file-in-vision/\">#</a></h2>\n<p>When loaded in the demo code, it shows the model in it's default state. In my example this is the classic T-pose without any animation applied. The Blender model has an animation, so let's apply it by adjusting the <code>ContentView</code> code:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RealityView</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> animatedModel <span class=\"token operator\">=</span> <span class=\"token function\">loadEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>animatedModel<span class=\"token punctuation\">)</span>\n                animatedModel<span class=\"token punctuation\">.</span>isEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> update<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> content <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> character <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">.</span>first <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\n            character<span class=\"token punctuation\">.</span>isEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            character<span class=\"token punctuation\">.</span>availableAnimations<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> animation <span class=\"token keyword\">in</span>\n                character<span class=\"token punctuation\">.</span><span class=\"token function\">playAnimation</span><span class=\"token punctuation\">(</span>animation<span class=\"token punctuation\">.</span><span class=\"token keyword\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Entity</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Scene\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> realityKitContentBundle<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This code starts by loading the <code>Scene</code> model entity using the <code>loadEntity</code> function. It sets <code>isEnabled</code> to false so that it won't show the default pose without animation applied. It then uses <code>update</code> to apply the animation from the model file.</p>\n<p>You may find though that the size still isn't right. In that case you can add some adjustments to the model in the <code>loadEntity</code> method.</p>\n<h3 id=\"scaling-in-code\" tabindex=\"-1\">Scaling in code <a class=\"header-anchor\" href=\"https://vision.rodeo/blender-file-in-vision/\">#</a></h3>\n<p>Rather than rely on sizing the model in Reality Composer Pro. In <code>loadEntity</code>, you can use <code>setScale</code> to adjust the output size:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Entity</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> entity <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Scene\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> realityKitContentBundle<span class=\"token punctuation\">)</span>\n\n    entity<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">setScale</span><span class=\"token punctuation\">(</span><span class=\"token function\">SIMD3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> relativeTo<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> entity\n<span class=\"token punctuation\">}</span></code></pre>\n<p>You should now have an animated model in your Vision app.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/Ix6VDSaiz2-1614.avif 1614w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/Ix6VDSaiz2-1614.webp 1614w\"><img alt=\"Finished animated model\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/Ix6VDSaiz2-1614.png\" width=\"1614\" height=\"1150\"></picture></p>\n",
			"date_published": "2024-06-10T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/returns/",
			"url": "https://vision.rodeo/returns/",
			"title": "Are people returning Vision Pro?",
			"content_html": "<p>It's been a couple of weeks since the Vision Pro started arriving in people's hands. I've been following the reactions and posts across social media such as Mastodon, and Reddit.</p>\n<p>I've seen people's initial posts on receiving it, countless posts around light seals, apps, band tips and hacks, and more. Even though I don't own one of these devices myself, I am very interested in what people think of it and want to be well informed for when it becomes available in my country.</p>\n<h2 id=\"click-bait-and-half-truths\" tabindex=\"-1\">Click-bait and half-truths <a class=\"header-anchor\" href=\"https://vision.rodeo/returns/\">#</a></h2>\n<p>This week has seen a couple of notable press drops, including Mark Zuckerberg saying <a href=\"https://variety.com/2024/digital/news/zuckerberg-apple-vision-pro-meta-quest-better-product-1235910851/\">the Quest 3 was a better product</a>, followed by reporting <a href=\"https://www.theverge.com/2024/2/14/24072792/apple-vision-pro-early-adopters-returns\">from The Verge</a> and <a href=\"https://uk.news.yahoo.com/techies-returning-apple-vision-pro-120000624.html\">Yahoo News</a> (among others) saying that people are returning their AVPs.</p>\n<p>As a response to these, I've seen a lot of people uncritically claiming on Mastodon that the product has failed, and that the majority of purchasers are unhappy enough to return it.</p>\n<p>This isn't what I've seen elsewhere.</p>\n<h2 id=\"magic-until-it-isn-t-and-then\" tabindex=\"-1\">Magic until it isn't... and then? <a class=\"header-anchor\" href=\"https://vision.rodeo/returns/\">#</a></h2>\n<p>Over on <a href=\"https://www.reddit.com/r/VisionPro/\">r/VisionPro</a> the mood is very different. This forum has gone through a journey this past couple of weeks. With the excitement around pre-ordering, to the hand-wringing over the <a href=\"https://www.theverge.com/24054862/apple-vision-pro-review-vr-ar-headset-features-price\">Verge's lukewarm enthusiasm</a>, to when the devices dropped and the journey since.</p>\n<p>Something I saw a lot was a journey like this. There's an initial mix of excitement and enthusiastic posting, alongside a smaller number of people expressing some buyer's remorse. Then over the following days, these posts went from &quot;I'm going to have to return this&quot; to &quot;I tried it again and I'm 50/50 now&quot;, then later in the week became &quot;I'm starting to love this&quot;.</p>\n<p>Concerns about comfort may not disappear for everyone, but for most people that, and the finicky eye tracking, the version-1 software glitches and the tunnel-like FOV become background noise as they continue to use the device.</p>\n<p>It made me think of Nilay's quote in his review, that it's &quot;magic until it's not&quot;. While that's right to a point, it doesn't really consider what happens <em>after</em> that. People learn more about what makes this device unique and in many cases grow to appreciate it over time.</p>\n<p>There were definitely some people who in the end couldn't justify keeping the device that they had paid so much for, primarily as it didn't seem worth the expense. I can understand this, but the proportion of those who decided to spend all that money to later change their minds doesn't seem to be the majority.</p>\n<p>Certainly not enough to justify reaching a conclusion that this product has failed and it being returned en masse. Yet that's what the headlines would suggest.</p>\n<h2 id=\"tyre-kicking-clout-chasing-and-the-return-cycle\" tabindex=\"-1\">Tyre-kicking, clout-chasing and the return cycle <a class=\"header-anchor\" href=\"https://vision.rodeo/returns/\">#</a></h2>\n<p>I think a big part of what we're seeing is people using the return window to try out this new shiny thing. For some it's not worth keeping and that's perfectly reasonable. However I think the more vocal reports, mostly on the social video platforms, is from people milking the return window for click-baiting content.</p>\n<p>The cycle for these people is to jump on the new thing, make content about ordering it, then using it, and finally make as much noise as they can when returning it. All these steps drive clicks and income, and costs them nothing as they get a full refund. I don't think this represents the average consumer or Apple fan. It's an easy way to both seem on the cutting edge, build an audience, and do so on the cheap.</p>\n<h2 id=\"what-to-think\" tabindex=\"-1\">What to think? <a class=\"header-anchor\" href=\"https://vision.rodeo/returns/\">#</a></h2>\n<p>Having read hundreds of threads by real-world users expressing their excitement, concerns, disappointments, hacks and hopes, I think this is very much an early adopter product that won't make everyone happy. Not yet anyway. It's pricey, finicky, but equally is awe-inspiring and a glimpse of a possible AR-infused future.</p>\n<p>It's an interesting product. Definitely not for everyone but at the same time, I do wish people would stop and think about what they're sharing when they echo the headlines that cherry-pick the &quot;bad&quot; news. This is a very exciting time to be in the Apple ecosystem and I'm looking forward to some day trying my own AVP.</p>\n",
			"date_published": "2024-02-16T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/app-roundup-1/",
			"url": "https://vision.rodeo/app-roundup-1/",
			"title": "Launch Apps",
			"content_html": "<p>Developers have been working hard to create or update their apps for Apple Vision Pro. Here's a list of selected apps you might want to try out.</p>\n<p>Strap in, cancel your Netflix, and load up some amazing apps!</p>\n<p><em>Prefer to see ALL the apps?</em> There's a great list of supported visionOS apps <a href=\"https://docs.google.com/spreadsheets/d/1Kbkm_jPdgV2qwhoRFIufCass8u2k-h4Xxuj0r7tXYZo/edit?pli=1#gid=0\">in this Google doc</a>. Worth a bookmark when you're looking for new ideas.</p>\n<h2 id=\"productivity-and-lifestyle\" tabindex=\"-1\">Productivity &amp; Lifestyle <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://www.finnvoorhees.com/shortcutbuttons\">Shortcut Buttons</a> - This looks fun! Add shortcuts to locations.</p>\n<p><a href=\"https://apps.apple.com/app/fantastical-calendar/id718043190\">Fantastical</a> - award-winning calendar app with powerful features including intuitive natural language text parsing and more. Check out their <a href=\"https://flexibits.com/blog/2023/08/sneaking-a-peek-at-fantastical-on-apple-vision-pro/\">Vision Pro launch blog post</a>.</p>\n<p><a href=\"https://runestone.app/\">Runestone</a> - A beautiful plain-text editor. I can see myself building websites and blogging with this.</p>\n<p><a href=\"https://apps.apple.com/app/pcalc/id284666222\">PCalc</a> - James Thompson's powerful scientific calculator will be ready to go at launch.</p>\n<p><a href=\"https://apps.apple.com/us/app/omniplan-4/id1460319993\">OmniPlan</a> - Bringing project management timelines to the Vision Pro. Check out their <a href=\"https://www.omnigroup.com/blog/omniplan-coming-to-apple-vision-pro\">blog post</a>.</p>\n<p><a href=\"https://apps.apple.com/app/finalist-daily-planner/id6447014685\">Finalist</a> - Daily / monthly planner to keep track of life.</p>\n<p><a href=\"https://soka.appdeco.ca\">Söka</a> - Manage your bucket lists and set new goals.</p>\n<p><a href=\"https://apps.apple.com/app/fin-budget-tracker/id1489698531\">Fin - Budget Tracker</a> - A beautiful budget app with interesting 3D-lit bar charts.</p>\n<p><a href=\"https://apps.apple.com/app/crouton-recipe-manager/id1461650987\">Crouton</a> - Beautiful recipe manager and meal planner.</p>\n<p><a href=\"https://apps.apple.com/app/j-crew/id1636531300\">J.Crew</a> - Fashion shopping.</p>\n<p><a href=\"https://apps.apple.com/app/focus-productivity-timer/id975017240\">Focus</a> - Pomodoro time-tracking app for productivity.</p>\n<p><a href=\"https://apps.apple.com/us/app/moosti/id1480602835\">Moosti</a> - Attractive pomodoro / mindfulness app.</p>\n<p><a href=\"https://eyen.fr/subjects/\">Subjects</a> - Easily manage school subjects and schedules.</p>\n<p><a href=\"https://www.swankyshark.com/great-white-board.html\">Great White Board</a> - A minimalist, fun shared whiteboard experience.</p>\n<p><a href=\"https://apps.apple.com/app/bezel-device-mirroring/id6476657945\">Bezel - Device Mirroring</a> - Mirror your iPhone in full detail as a 3D model. <a href=\"https://getbezel.app/vision/\">More info here</a>.</p>\n<p><a href=\"https://apps.apple.com/app/voice-pen-speech-to-pure-text/id6462815872\">Voice Pen</a> - Avoid the built-in keyboard with this excellent transcription app that uses AI to improve accuracy.</p>\n<h2 id=\"music\" tabindex=\"-1\">Music <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/us/app/spatial-symphony/id6476616491\">Spatial Symphony</a> - Create custom soundscapes with hand-controlled music synthesis.</p>\n<p><a href=\"https://apps.apple.com/app/djay-dj-app-ai-mixer/id450527929\">djay</a> - Virtual decks and mixing optimised for an immersive experience.</p>\n<p><a href=\"https://apps.apple.com/app/piano-flowing-tiles/id6472594978\">Piano: Flowing Tiles</a> - Guided piano playing in AR.</p>\n<p><a href=\"https://longplay.rocks/\">LongPlay</a> - Rediscover, enjoy and organise your album collection.</p>\n<p><a href=\"https://apps.apple.com/app/spool-music-video-editor/id1604274234\">Spool</a> - Create visuals for your music.</p>\n<h2 id=\"health\" tabindex=\"-1\">Health <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/app/complete-heartx/id6450795770\">Complete HeartX</a> - Explore how the heart works.</p>\n<p><a href=\"https://apps.apple.com/app/vibescape/id6476827678\">VibeScape</a> - Immersive meditation with unique locations. Check out <a href=\"https://www.apposite.ai/vibescape.html\">the blog post</a>.</p>\n<p><a href=\"https://apps.apple.com/app/lungy-interactive-breathing/id1545223887\">Lungy</a> - A deeply beautiful breathing app that applies a little medical rigor.</p>\n<p><a href=\"https://apps.apple.com/us/app/calisthenics-crossfit-coachy/id1534754095\">Coachy</a> - Bodyweight fitness workouts.</p>\n<h2 id=\"sports\" tabindex=\"-1\">Sports <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/us/app/pga-tour-vision/id6471858717\">PGA Tour Vision</a> - Experience golf like never before.</p>\n<p><a href=\"https://apps.apple.com/app/nba-live-games-scores/id484672289\">NBA</a> - Live scores and insights on basketball stuff.</p>\n<p><a href=\"https://apps.apple.com/app/mlb/id493619333\">MLB</a> - Live baseball and on-demand.</p>\n<p><a href=\"https://apps.apple.com/app/espn-live-sports-scores/id317469184\">ESPN</a> - Live sports and scores.</p>\n<p><a href=\"https://apps.apple.com/app/discovery-stream-tv-shows/id395972146\">Discovery+</a> - TV show streaming.</p>\n<p><a href=\"https://apps.apple.com/app/crunchyroll/id329913454\">Crunchyroll</a> - Anime streaming.</p>\n<p><a href=\"https://apps.apple.com/app/cricket-scores-live-matches/id1616385207\">Cricket Scores Live Matches</a> - Cricket stats and live streams.</p>\n<h2 id=\"entertainment\" tabindex=\"-1\">Entertainment <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/app/disney/id1446075923\">Disney+</a> - All the usual Disney content including 3D movies, custom environments and more.</p>\n<p><a href=\"https://apps.apple.com/app/play-save-videos-watch-later/id1596506190\">Play</a> - Save videos to watch later.</p>\n<h2 id=\"education\" tabindex=\"-1\">Education <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/app/study-snacks-playful-learning/id6444380323\">Study Snacks</a> - Playful learning.</p>\n<p><a href=\"https://www.studioamanga.com/memorii/\">Memorii</a> - Flashcards for learning Chinese hanzi, Japanese kanji, and Korean hangul.</p>\n<h2 id=\"games\" tabindex=\"-1\">Games <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/us/app/game-room/id1642897935\">Game Room</a> - A collection of tabletop games in an immersive environment.</p>\n<p><a href=\"https://apps.apple.com/app/what-the-golf/id1415190483\">What the Golf</a> - Quirky golf game. Check the <a href=\"https://www.reddit.com/r/VisionPro/comments/19epb4f/what_the_golf_app_trailer/\">Vision Pro promo video</a>.</p>\n<p><a href=\"https://apps.apple.com/app/cut-the-rope-3/id997332884\">Cut the Rope</a> - Cute physics-based puzzler.</p>\n<p><a href=\"https://apps.apple.com/app/demeo/id6463004635\">Demeo</a> - Tabletop RPG simulator.</p>\n<p><a href=\"https://apps.apple.com/us/app/vision-ploppy-pairs-full-space/id6472619150\">Ploppy Pairs</a> - A colorful fun memory game.</p>\n<p><a href=\"https://apps.apple.com/app/void-x/id1622479769\">Void-X</a> - A bullethell game with interesting particle effects.</p>\n<p><a href=\"https://apps.apple.com/app/steam-link/id1246969117\">Steam Link</a> - Play your Steam library on a massive virtual screen.</p>\n<p><a href=\"https://gametrack.app/\">Gametrack</a> - Track and share your gaming life.</p>\n<p><a href=\"https://apps.apple.com/us/app/kattam/id6476475799\">Kattam</a> - Not sure yet but should be a game available at launch. Check back for details.</p>\n<h2 id=\"developer-tools\" tabindex=\"-1\">Developer tools <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://telemetrydeck.com\">TelemetryDeck</a> - Privacy-first visitor tracking. Check out <a href=\"https://telemetrydeck.com/blog/vision-pro-ready/\">the TelemetryDeck Vision Pro blog post</a>.</p>\n<p><a href=\"https://apps.apple.com/app/spatial-effects/id6476788209\">Spatial Effects</a> - A particle emitter playground. Step into a world where your imagination comes to life with Spatial Effects!</p>\n<p><a href=\"https://thatvirtualboy.com/bentocraft\">Bento|Craft</a> - Create beautiful promotional artwork to highlight your app's features.</p>\n<h2 id=\"other-stuff\" tabindex=\"-1\">Other Stuff <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p><a href=\"https://apps.apple.com/app/widgetsmith/id1523682319\">Widgetsmith</a> - Create a personal experience with a wide range of widgets.</p>\n<p><a href=\"https://apps.apple.com/app/jigspace-3d-presentations/id6456791766\">JigSpace</a> - Explore 3D objects.</p>\n<p><a href=\"https://viac.app/\">Voice in a Can</a> - Virtual Alexa assistant.</p>\n<p><a href=\"https://apps.apple.com/app/carrot-weather/id993487541?mt=12\">Carrot Weather</a> - A crazy-powerful (and privacy-conscious) weather app.</p>\n<p><a href=\"https://apps.apple.com/au/app/mercury-weather/id1621800675\">Mercury Weather</a> - A fun and beautiful weather app.</p>\n<p><a href=\"https://plantdaddy.app/\">Plant Daddy</a> - The mod­ern, cute little place to keep track of your plants’ needs.</p>\n<p><a href=\"https://apps.apple.com/us/app/navi-subtitles-translation/id1573261774\">Navi - Subtitles &amp; Translation</a> - Adds transcriptions to Facetime calls through SharePlay. See the <a href=\"https://twitter.com/spatialreport/status/1749215350019833922/mediaViewer?currentTweet=1749215350019833922&amp;currentTweetUser=spatialreport\">demo video here</a>.</p>\n<p><a href=\"https://apps.apple.com/app/night-sky/id475772902\">Night Sky</a> - See what's above you. I'm really looking forward to what this could bring.</p>\n<p><a href=\"https://apps.apple.com/us/app/quiet/id1441525727\">Quiet</a> - A content blocker to reclaim your Safari browsing experience. Read <a href=\"https://petercammeraat.net/journal/2024/quiet-4-2-new-app-icon-and-visionos-support/\">the Vision Pro blog post here</a>.</p>\n<p><a href=\"https://apps.apple.com/app/ocean-chill/id6476815660\">Ocean Chill</a> - Relaxing ocean vibes.</p>\n<h2 id=\"got-any-others\" tabindex=\"-1\">Got any others? <a class=\"header-anchor\" href=\"https://vision.rodeo/app-roundup-1/\">#</a></h2>\n<p>If you hear of a cool app you'd like me to add to this or the next roundup, <a href=\"mailto:vision-links@hop.ie\">let me know</a>.</p>\n",
			"date_published": "2024-01-29T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/vision/",
			"url": "https://vision.rodeo/vision/",
			"title": "Apple’s Vision",
			"content_html": "<p>Let's discuss the <em>vision</em> in Apple Vision Pro, and what this product represents.</p>\n<h2 id=\"looking-to-the-future\" tabindex=\"-1\">Looking to the future <a class=\"header-anchor\" href=\"https://vision.rodeo/vision/\">#</a></h2>\n<p>Imagine we could make use of technology without being bound by screens. All while living our day to day lives. Seamlessly blending the virtual with reality.</p>\n<p>This is what AR (augmented reality) promises, and we are not there yet. Camera and screen technology is only now reaching a level where we can present our surroundings at a high enough fidelity to be considered AR, and even then the headsets are bulky and not the most comfortable experience.</p>\n<p>The vision of AR is that technology will enable a seamless integration of our computing lives with the real world around us. I think this headset from Apple is a step toward making it a reality.</p>\n<h3 id=\"simulations-in-simulations\" tabindex=\"-1\">Simulations in simulations <a class=\"header-anchor\" href=\"https://vision.rodeo/vision/\">#</a></h3>\n<p>When we build apps on our computers using Xcode's simulator, it simulates the experience of how the app would look in Vision Pro. This allows us to have some idea of what it will be like when the app is used by a user on the device.</p>\n<p>I see the Vision Pro headset as a simulator for what a truly augmented reality would look like. Just as the simulator on Xcode is a two-dimensional proxy to the real thing, this headset from Apple uses cameras (and some clever algorithms) to represent what we'd see without any headset. It then adds the our apps and content, as if they were in the real world around us.</p>\n<p>This differs from other headsets whose purpose was virtual environments. These devices purpose is to take the user into a new space and present all-encompassing 3D experiences. These are great and have many uses, but I don't think VR (virtual reality) is Apple's primary goal.</p>\n<p>The lack of emphasis on games is an example. Until now, the primary goal of VR headsets has been gaming and socialising within virtual worlds.</p>\n<p>Vision Pro is more about presenting us with our own world, which is then augmented.</p>\n<h2 id=\"a-platform-for-experimentation-and-learning\" tabindex=\"-1\">A platform for experimentation and learning <a class=\"header-anchor\" href=\"https://vision.rodeo/vision/\">#</a></h2>\n<p>I think Apple is trying to make a very good headset that will be fantastic for both VR and AR experiences. Apple wants people to be able to step away from their world into entirely new spaces, but I don't think VR is the whole game. This is a new platform in which we can work out what works or doesn't work in a platform that aims to ground us in our own world.</p>\n<p>Just as the original iPhone emphasised touch as an input, this headset will encourage developers to experiment with controller-free eye tracking and hand tracking. It will allow us to build applications that explode out of the bounds of the screens, and make use of the infinite canvas all around.</p>\n<p>It will allow us to work toward a future of computing in which we remain better connected to our environment and those around us while also enjoying all the benefits our technology offers.</p>\n<h2 id=\"a-first-step\" tabindex=\"-1\">A first step <a class=\"header-anchor\" href=\"https://vision.rodeo/vision/\">#</a></h2>\n<p>Many commenters have suggested that this is a beta test of a product, or an prototype, and in a sense I agree. This headset is a bulky, power-hungry device that is not something many people will want to wear all day.</p>\n<p>For that reason I see this as the first step toward a new approach to <a href=\"https://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction\">human-computer interation</a>. It's not there yet, but this is glimpse of how it could be.</p>\n",
			"date_published": "2024-01-28T00:00:00Z"
		}
		,
		{
			"id": "https://vision.rodeo/hello/",
			"url": "https://vision.rodeo/hello/",
			"title": "hello",
			"content_html": "<p>This is my first post while I get things started on this little site about <a href=\"https://www.apple.com/apple-vision-pro/\">Apple Vision Pro</a>!</p>\n<p>I'm looking forward to learning how this new tech will work, as well as building apps for it in SwiftUI.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://vision.rodeo/img/SOFWriN75L-800.avif 800w\"><source type=\"image/webp\" srcset=\"https://vision.rodeo/img/SOFWriN75L-800.webp 800w\"><img alt=\"The classic Apple Hello text in Vision Pro\" loading=\"lazy\" decoding=\"async\" src=\"https://vision.rodeo/img/SOFWriN75L-800.jpeg\" width=\"800\" height=\"450\"></picture></p>\n<h2 id=\"why-apple-vision-pro\" tabindex=\"-1\">Why Apple Vision Pro? <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>I'm a web designer and developer and have been working on the web for over 20 years. When I began creating web sites, CSS was brand new and web browsers were a lot more primative than they are today, but the platform was new and exciting.</p>\n<p>Being able to design, create and publish my ideas for the world to see from the comfort of my sofa was a revolutionary time. The web has since grown to become simultaneously more important but also more mundane. It's possible to create random little sites like this but few people do, and it feels like less of a world wild web and more dominated by heterogenous, large platforms.</p>\n<p>The iPhone was <a href=\"https://en.wikipedia.org/wiki/IPhone\">launched almost 16 years ago</a>, and has created it's own wonderful ecosystem of creativity. It introduced the first good implementation of a touch-based interface and made the internet available in a pocket-sized device to everyone.</p>\n<p>Building apps was also something within reach of a solo developer. The tools to build on iOS have continued to to get better and better, while the technology has become more refined. Which leads to what I hope will be another exciting stage in technology, <a href=\"https://en.wikipedia.org/wiki/Spatial_computing\">spatial computing</a>.</p>\n<h2 id=\"spatial-computing-vs-vr\" tabindex=\"-1\">Spatial computing vs VR <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>Most headsets aim for a primarily <a href=\"https://en.wikipedia.org/wiki/Virtual_reality\">virtual reality</a> (VR) approach, in which the user is placed into an entirely simulated environment. As technology has improved this has created some amazing, immersive games and simulations.</p>\n<p>What is more tricky is supporting <a href=\"https://en.wikipedia.org/wiki/Augmented_reality\">augmented reality</a> (AR). This when the real world is visible and a computer overlays items on top. To do this requires cameras, lots of smart code to adjust and shape the camera input to look right, as well as sensors to detect where the headset is and where the user is looking.</p>\n<p>With all these pieces in place, the headset can then render visual elements within the video stream and make it look like your computer and the real world are intermingled. The result, if done well, allows us to explore computing beyond the constraint of screens.</p>\n<p>As much as laptops are amazing devices, having a seemingly infinite canvas within which 3D computing elements can be placed is a big step forward.</p>\n<h2 id=\"apple-s-difference\" tabindex=\"-1\">Apple's difference <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>Compared to other platforms such as the <a href=\"https://en.wikipedia.org/wiki/Meta_Quest_3\">Meta Quest</a> or <a href=\"https://en.wikipedia.org/wiki/PlayStation_VR\">PlayStation VR</a>, Apple has taken a different approach.</p>\n<p>Where the previously mentioned headsets are designed and marketed primarily as gaming devices, Apple has promoted their headset as an entertainment and creative productivity device.</p>\n<p>I'm sure there'll be games, and maybe I'll try making some. However with no controllers, and a much more expensive device, the value I'm hoping Vision Pro will bring will be much more than games.</p>\n<p>It's like when laptops were dull, beige and focused on office productivity, and Apple promoted their laptops as <em>creative</em> tools. The Vision Pro is being positioned as a device that will bring spatial computing and be a creative tool rather than just got gaming.</p>\n<h2 id=\"cutting-edge-technology\" tabindex=\"-1\">Cutting-edge technology <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>Apple's Vision Pro combines the highest fidelity of passthrough video, with state of the art eye tracking, and a (hopefully) expansive array of applications.</p>\n<h2 id=\"so-what-s-this-blog-about\" tabindex=\"-1\">So what's this blog about? <a class=\"header-anchor\" href=\"https://vision.rodeo/hello/\">#</a></h2>\n<p>I'm interested in exploring what this new platform offers, from a developer's perspective. I'd like to ask questions such as how we build spatial experiences, what makes a good Vision Pro app, and how we find inspiration as this platform emerges.</p>\n<p>I have a lot to learn and I find blogging about it can be a great way to reinforce my learning. It's fun too.</p>\n<p>Time will tell if the device is worth the asking price. Developers will explore the capabilities and build apps to see what it can do. I'm excited to be in a position to learn how to build apps for this platform, and I'll continue documenting this journey here.</p>\n",
			"date_published": "2024-01-26T00:00:00Z"
		}
		
	]
}
